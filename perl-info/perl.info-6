Info file: perl.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `bigperl.texi'
using `texinfmt.el' version 2.32 of 19 November 1993.

settitle perl



File: perl.info, Node: perllocale, Next: perlref, Prev: perlform, Up: Top

Perl locale handling (internationalization and localization)
************************************************************



NAME
====

perllocale - Perl locale handling (internationalization and
localization)


DESCRIPTION
===========

Perl supports language-specific notions of data such as "is this a
letter", "what is the uppercase equivalent of this letter", and "which
of these letters comes first".  These are important issues, especially
for languages other than English - but also for English: it would be
very naE<iuml>ve to think that `A-Za-z' defines all the "letters". Perl
is also aware that some character other than '.' may be preferred as a
decimal point, and that output date representations may be
language-specific.  The process of making an application take account of
its users' preferences in such matters is called *internationalization*
(often abbreviated as *i18n*); telling such an application about a
particular set of preferences is known as *localization* (*l10n*).

Perl can understand language-specific data via the standardized (ISO C,
XPG4, POSIX 1.c) method called "the locale system". The locale system is
controlled per application using one pragma, one function call, and
several environment variables.

NOTE: This feature is new in Perl 5.004, and does not apply unless an
application specifically requests it - see `Backward compatibility' in this node.
The one exception is that write() now *always* uses the current locale
- see `"NOTES"' in this node.


PREPARING TO USE LOCALES
========================

If Perl applications are to be able to understand and present your data
correctly according a locale of your choice, all of the following must
be true:

   * *Your operating system must support the locale system*.  If it does,
     you should find that the setlocale() function is a documented part
     of its C library.

   * *Definitions for the locales which you use must be installed*.  You, or
     your system administrator, must make sure that this is the
     case. The available locales, the location in which they are kept,
     and the manner in which they are installed, vary from system to
     system.  Some systems provide only a few, hard-wired, locales, and
     do not allow more to be added; others allow you to add "canned"
     locales provided by the system supplier; still others allow you or
     the system administrator to define and add arbitrary locales.  (You
     may have to ask your supplier to provide canned locales which are
     not delivered with your operating system.)  Read your system
     documentation for further illumination.

   * *Perl must believe that the locale system is supported*.  If it does,
     `perl -V:d_setlocale' will say that the value for `d_setlocale' is
     `define'.

If you want a Perl application to process and present your data
according to a particular locale, the application code should include
the `use locale' pragma (see `The use locale pragma' in this node) where
appropriate, and *at least one* of the following must be true:

   * *The locale-determining environment variables (see `"ENVIRONMENT"' in this node)
     must be correctly set up*, either by yourself, or by the person who
     set up your system account, at the time the application is started.

   * *The application must set its own locale* using the method described in
     `The setlocale function' in this node.


USING LOCALES
=============


The use locale pragma
---------------------

By default, Perl ignores the current locale.  The `use locale'
pragma tells Perl to use the current locale for some operations:

   * *The comparison operators* (lt, le, cmp, ge, and gt) and
     the POSIX string collation functions strcoll() and strxfrm() use
     LC_COLLATE.  sort() is also affected if it is used without an
     explicit comparison function because it uses cmp by default.

     *Note:* eq and ne are unaffected by the locale: they always
     perform a byte-by-byte comparison of their scalar operands.  What's
     more, if cmp finds that its operands are equal according to the
     collation sequence specified by the current locale, it goes on to
     perform a byte-by-byte comparison, and only returns *0* (equal) if
     the operands are bit-for-bit identical.  If you really want to know
     whether two strings - which eq and cmp may consider different - are
     equal as far as collation in the locale is concerned, see the
     discussion in `Category LC_COLLATE: Collation' in this node.

   * *Regular expressions and case-modification functions* (uc(), lc(),
     ucfirst(), and lcfirst()) use LC_CTYPE

   * *The formatting functions* (printf(), sprintf() and write()) use
     LC_NUMERIC

   * *The POSIX date formatting function* (strftime()) uses LC_TIME.

LC_COLLATE, LC_CTYPE, and so on, are discussed further in `LOCALE
CATEGORIES' in this node.

The default behavior returns with `no locale' or on reaching the
end of the enclosing block.

Note that the string result of any operation that uses locale
information is tainted, as it is possible for a locale to be
untrustworthy.  See `"SECURITY"' in this node.


The setlocale function
----------------------

You can switch locales as often as you wish at run time with the
POSIX::setlocale() function:

     # This functionality not usable prior to Perl 5.004
     require 5.004;

     # Import locale-handling tool set from POSIX module.
     # This example uses: setlocale -- the function call
     #                    LC_CTYPE -- explained below
     use POSIX qw(locale_h);

     # query and save the old locale
     $old_locale = setlocale(LC_CTYPE);

     setlocale(LC_CTYPE, "fr_CA.ISO8859-1");
     # LC_CTYPE now in locale "French, Canada, codeset ISO 8859-1"

     setlocale(LC_CTYPE, "");
     # LC_CTYPE now reset to default defined by LC_ALL/LC_CTYPE/LANG
     # environment variables.  See below for documentation.

     # restore the old locale
     setlocale(LC_CTYPE, $old_locale);

The first argument of setlocale() gives the *category*, the second the
locale.  The category tells in what aspect of data processing you want
to apply locale-specific rules.  Category names are discussed in `LOCALE
CATEGORIES' in this node and `"ENVIRONMENT"' in this node.  The locale
is the name of a collection of customization information corresponding
to a particular combination of language, country or territory, and
codeset.  Read on for hints on the naming of locales: not all systems
name locales as in the example.

If no second argument is provided, the function returns a string naming
the current locale for the category.  You can use this value as the
second argument in a subsequent call to setlocale().  If a second
argument is given and it corresponds to a valid locale, the locale for
the category is set to that value, and the function returns the
now-current locale value.  You can use this in a subsequent call to
setlocale().  (In some implementations, the return value may sometimes
differ from the value you gave as the second argument - think of it as
an alias for the value that you gave.)

As the example shows, if the second argument is an empty string, the
category's locale is returned to the default specified by the
corresponding environment variables.  Generally, this results in a
return to the default which was in force when Perl started up: changes
to the environment made by the application after startup may or may not
be noticed, depending on the implementation of your system's C library.

If the second argument does not correspond to a valid locale, the locale
for the category is not changed, and the function returns undef.

For further information about the categories, consult `setlocale(3)' in
this node.  For the locales available in your system, also consult
`setlocale(3)' in this node and see whether it leads you to the list of
the available locales (search for the SEE ALSO section).  If that fails,
try the following command lines:

     locale -a

     nlsinfo

     ls /usr/lib/nls/loc

     ls /usr/lib/locale

     ls /usr/lib/nls

and see whether they list something resembling these

     en_US.ISO8859-1     de_DE.ISO8859-1     ru_RU.ISO8859-5
     en_US               de_DE               ru_RU
     en                  de                  ru
     english             german              russian
     english.iso88591    german.iso88591     russian.iso88595

Sadly, even though the calling interface for setlocale() has been
standardized, the names of the locales and the directories where
the configuration is, have not.  The basic form of the name is
*language_country/territory*.*codeset*, but the
latter parts are not always present.

Two special locales are worth particular mention: "C" and "POSIX".
Currently these are effectively the same locale: the difference is
mainly that the first one is defined by the C standard and the second by
the POSIX standard.  What they define is the *default locale* in which
every program starts in the absence of locale information in its
environment.  (The default default locale, if you will.)  Its language
is (American) English and its character codeset ASCII.

NOTE: Not all systems have the "POSIX" locale (not all systems are
POSIX-conformant), so use "C" when you need explicitly to specify this
default locale.


The localeconv function
-----------------------

The POSIX::localeconv() function allows you to get particulars of the
locale-dependent numeric formatting information specified by the current
LC_NUMERIC and LC_MONETARY locales.  (If you just want the name of the
current locale for a particular category, use POSIX::setlocale() with a
single parameter - see `The setlocale function' in this node.)

     use POSIX qw(locale_h);

     # Get a reference to a hash of locale-dependent info
     $locale_values = localeconv();

     # Output sorted list of the values
     for (sort keys %$locale_values) {
         printf "%-20s = %s\n", $_, $locale_values->{$_}
     }

localeconv() takes no arguments, and returns *a reference to* a hash.
The keys of this hash are formatting variable names such as
`decimal_point' and `thousands_sep'; the values are the corresponding
values.  See `POSIX (3)' in this node for a longer example, which lists
all the categories an implementation might be expected to provide; some
provide more and others fewer, however.  Note that you don't need `use
locale': as a function with the job of querying the locale, localeconv()
always observes the current locale.

Here's a simple-minded example program which rewrites its command line
parameters as integers formatted correctly in the current locale:

     # See comments in previous example
     require 5.004;
     use POSIX qw(locale_h);

     # Get some of locale's numeric formatting parameters
     my ($thousands_sep, $grouping) =
          @{localeconv()}{'thousands_sep', 'grouping'};

     # Apply defaults if values are missing
     $thousands_sep = ',' unless $thousands_sep;
     $grouping = 3 unless $grouping;

     # Format command line params for current locale
     for (@ARGV) {
         $_ = int;    # Chop non-integer part
         1 while
         s/(\d)(\d{$grouping}($|$thousands_sep))/$1$thousands_sep$2/;
         print "$_";
     }
     print "\n";


LOCALE CATEGORIES
=================

The subsections which follow describe basic locale categories.  As well
as these, there are some combination categories which allow the
manipulation of more than one basic category at a time.  See
`"ENVIRONMENT"' in this node for a discussion of these.


Category LC_COLLATE: Collation
------------------------------

When in the scope of `use locale', Perl looks to the LC_COLLATE
environment variable to determine the application's notions on the
collation (ordering) of characters.  ('b' follows 'a' in Latin
alphabets, but where do 'E<aacute>' and 'E<aring>' belong?)

Here is a code snippet that will tell you what are the alphanumeric
characters in the current locale, in the locale order:

     use locale;
     print +(sort grep /\w/, map { chr() } 0..255), "\n";

Compare this with the characters that you see and their order if you
state explicitly that the locale should be ignored:

     no locale;
     print +(sort grep /\w/, map { chr() } 0..255), "\n";

This machine-native collation (which is what you get unless `use
locale' has appeared earlier in the same block) must be used for
sorting raw binary data, whereas the locale-dependent collation of the
first example is useful for natural text.

As noted in `USING LOCALES' in this node, cmp compares according to the
current collation locale when `use locale' is in effect, but falls back
to a byte-by-byte comparison for strings which the locale says are
equal. You can use POSIX::strcoll() if you don't want this fall-back:

     use POSIX qw(strcoll);
     $equal_in_locale =
         !strcoll("space and case ignored", "SpaceAndCaseIgnored");

$equal_in_locale will be true if the collation locale specifies a
dictionary-like ordering which ignores space characters completely, and
which folds case.

If you have a single string which you want to check for "equality in
locale" against several others, you might think you could gain a little
efficiency by using POSIX::strxfrm() in conjunction with eq:

     use POSIX qw(strxfrm);
     $xfrm_string = strxfrm("Mixed-case string");
     print "locale collation ignores spaces\n"
         if $xfrm_string eq strxfrm("Mixed-casestring");
     print "locale collation ignores hyphens\n"
         if $xfrm_string eq strxfrm("Mixedcase string");
     print "locale collation ignores case\n"
         if $xfrm_string eq strxfrm("mixed-case string");

strxfrm() takes a string and maps it into a transformed string for use
in byte-by-byte comparisons against other transformed strings during
collation.  "Under the hood", locale-affected Perl comparison operators
call strxfrm() for both their operands, then do a byte-by-byte
comparison of the transformed strings.  By calling strxfrm() explicitly,
and using a non locale-affected comparison, the example attempts to save
a couple of transformations.  In fact, it doesn't save anything: Perl
magic (see `Magic Variables', *Note Perlguts: perlguts,) creates the
transformed version of a string the first time it's needed in a
comparison, then keeps it around in case it's needed again.  An example
rewritten the easy way with cmp runs just about as fast.  It also copes
with null characters embedded in strings; if you call strxfrm()
directly, it treats the first null it finds as a terminator.  And don't
expect the transformed strings it produces to be portable across systems
- or even from one revision of your operating system to the next.  In
short, don't call strxfrm() directly: let Perl do it for you.

Note: `use locale' isn't shown in some of these examples, as it isn't
needed: strcoll() and strxfrm() exist only to generate locale-dependent
results, and so always obey the current LC_COLLATE locale.


Category LC_CTYPE: Character Types
----------------------------------

When in the scope of `use locale', Perl obeys the LC_CTYPE locale
setting.  This controls the application's notion of which characters are
alphabetic.  This affects Perl's `\w' regular expression metanotation,
which stands for alphanumeric characters - that is, alphabetic and
numeric characters.  (Consult *Note Perlre: perlre, for more information about
regular expressions.)  Thanks to LC_CTYPE, depending on your locale
setting, characters like 'E<aelig>', 'E<eth>', 'E<szlig>', and
'E<oslash>' may be understood as `\w' characters.

The LC_CTYPE locale also provides the map used in translating characters
between lower and uppercase.  This affects the case-mapping functions -
lc(), lcfirst, uc() and ucfirst(); case-mapping interpolation with `\l',
`\L', `\u' or <\U> in double-quoted strings and in s/// substitutions;
and case-independent regular expression pattern matching using the i
modifier.

Finally, LC_CTYPE affects the POSIX character-class test functions -
isalpha(), islower() and so on.  For example, if you move from the "C"
locale to a 7-bit Scandinavian one, you may find - possibly to your
surprise - that "|" moves from the ispunct() class to isalpha().

*Note:* A broken or malicious LC_CTYPE locale definition may result
in clearly ineligible characters being considered to be alphanumeric by
your application.  For strict matching of (unaccented) letters and
digits - for example, in command strings - locale-aware applications
should use `\w' inside a `no locale' block.  See `"SECURITY"' in this
node.


Category LC_NUMERIC: Numeric Formatting
---------------------------------------

When in the scope of `use locale', Perl obeys the LC_NUMERIC
locale information, which controls application's idea of how numbers
should be formatted for human readability by the printf(), sprintf(),
and write() functions.  String to numeric conversion by the
POSIX::strtod() function is also affected.  In most implementations the
only effect is to change the character used for the decimal point -
perhaps from '.'  to ',': these functions aren't aware of such niceties
as thousands separation and so on.  (See `The localeconv function' in this node if
you care about these things.)

Note that output produced by print() is *never* affected by the current
locale: it is independent of whether `use locale' or `no locale' is in
effect, and corresponds to what you'd get from printf() in the "C"
locale.  The same is true for Perl's internal conversions between
numeric and string formats:

     use POSIX qw(strtod);
     use locale;

     $n = 5/2;   # Assign numeric 2.5 to $n

     $a = " $n"; # Locale-independent conversion to string

     print "half five is $n\n";       # Locale-independent output

     printf "half five is %g\n", $n;  # Locale-dependent output

     print "DECIMAL POINT IS COMMA\n"
         if $n == (strtod("2,5"))[0]; # Locale-dependent conversion


Category LC_MONETARY: Formatting of monetary amounts
----------------------------------------------------

The C standard defines the LC_MONETARY category, but no function that is
affected by its contents.  (Those with experience of standards
committees will recognize that the working group decided to punt on the
issue.)  Consequently, Perl takes no notice of it.  If you really want
to use LC_MONETARY, you can query its contents - see `The localeconv
function' in this node - and use the information that it returns in your
application's own formatting of currency amounts.  However, you may well
find that the information, though voluminous and complex, does not quite
meet your requirements: currency formatting is a hard nut to crack.


LC_TIME
-------

The output produced by POSIX::strftime(), which builds a formatted
human-readable date/time string, is affected by the current LC_TIME
locale.  Thus, in a French locale, the output produced by the `%B'
format element (full month name) for the first month of the year would
be "janvier".  Here's how to get a list of the long month names in the
current locale:

     use POSIX qw(strftime);
     for (0..11) {
         $long_month_name[$_] =
             strftime("%B", 0, 0, 0, 1, $_, 96);
     }

Note: `use locale' isn't needed in this example: as a function which
exists only to generate locale-dependent results, strftime() always
obeys the current LC_TIME locale.


Other categories
----------------

The remaining locale category, `LC_MESSAGES' (possibly supplemented by
others in particular implementations) is not currently used by Perl -
except possibly to affect the behavior of library functions called by
extensions which are not part of the standard Perl distribution.


SECURITY
========

While the main discussion of Perl security issues can be found in
*Note Perlsec: perlsec,, a discussion of Perl's locale handling would be incomplete
if it did not draw your attention to locale-dependent security issues.
Locales - particularly on systems which allow unprivileged users to
build their own locales - are untrustworthy.  A malicious (or just plain
broken) locale can make a locale-aware application give unexpected
results.  Here are a few possibilities:

   * Regular expression checks for safe file names or mail addresses
     using `\w' may be spoofed by an LC_CTYPE locale which claims that
     characters such as ">" and "|" are alphanumeric.

   * String interpolation with case-mapping, as in, say, `$dest =
     "C:\U$name.$ext"', may produce dangerous results if a bogus
     LC_CTYPE case-mapping table is in effect.

   * If the decimal point character in the LC_NUMERIC locale is
     surreptitiously changed from a dot to a comma, `sprintf("%g",
     0.123456e3)' produces a string result of "123,456". Many people
     would interpret this as one hundred and twenty-three thousand, four
     hundred and fifty-six.

   * A sneaky LC_COLLATE locale could result in the names of students
     with "D" grades appearing ahead of those with "A"s.

   * An application which takes the trouble to use the information in
     LC_MONETARY may format debits as if they were credits and vice
     versa if that locale has been subverted.  Or it make may make
     payments in US dollars instead of Hong Kong dollars.

   * The date and day names in dates formatted by strftime() could be
     manipulated to advantage by a malicious user able to subvert the
     `LC_DATE' locale.  ("Look - it says I wasn't in the building on
     Sunday.")

Such dangers are not peculiar to the locale system: any aspect of an
application's environment which may maliciously be modified presents
similar challenges.  Similarly, they are not specific to Perl: any
programming language which allows you to write programs which take
account of their environment exposes you to these issues.

Perl cannot protect you from all of the possibilities shown in the
examples - there is no substitute for your own vigilance - but, when
`use locale' is in effect, Perl uses the tainting mechanism (see
*Note Perlsec: perlsec,) to mark string results which become locale-dependent, and
which may be untrustworthy in consequence.  Here is a summary of the
tainting behavior of operators and functions which may be affected by
the locale:

*Comparison operators* (lt, le, ge, gt and cmp):
     Scalar true/false (or less/equal/greater) result is never tainted.

*Case-mapping interpolation* (with `\l', `\L', `\u' or <\U>)
     Result string containing interpolated material is tainted if `use
     locale' is in effect.

*Matching operator* (m//):
     Scalar true/false result never tainted.

     Subpatterns, either delivered as an array-context result, or as $1
     etc.  are tainted if `use locale' is in effect, and the subpattern
     regular expression contains `\w' (to match an alphanumeric
     character), `\W' (non-alphanumeric character), `\s' (white-space
     character), or `\S' (non white-space character).  The matched
     pattern variable, $&, $` (pre-match), $' (post-match), and $+ (last
     match) are also tainted if `use locale' is in effect and the
     regular expression contains `\w', `\W', `\s', or `\S'.

*Substitution operator* (s///):
     Has the same behavior as the match operator.  Also, the left
     operand of `=~' becomes tainted when `use locale' in effect, if it
     is modified as a result of a substitution based on a regular
     expression match involving `\w', `\W', `\s', or `\S'; or of
     case-mapping with `\l', `\L',`\u' or <\U>.

*In-memory formatting function* (sprintf()):
     Result is tainted if "use locale" is in effect.

*Output formatting functions* (printf() and write()):
     Success/failure result is never tainted.

*Case-mapping functions* (lc(), lcfirst(), uc(), ucfirst()):
     Results are tainted if `use locale' is in effect.

*POSIX locale-dependent functions* (localeconv(), strcoll(), strftime(), strxfrm()):
     Results are never tainted.

*POSIX character class tests* (isalnum(), isalpha(), isdigit(), isgraph(), islower(), isprint(), ispunct(), isspace(), isupper(), isxdigit()):
     True/false results are never tainted.

Three examples illustrate locale-dependent tainting.  The first program,
which ignores its locale, won't run: a value taken directly from the
command line may not be used to name an output file when taint checks
are enabled.

     #/usr/local/bin/perl -T
     # Run with taint checking

     # Command line sanity check omitted...
     $tainted_output_file = shift;

     open(F, ">$tainted_output_file")
         or warn "Open of $untainted_output_file failed: $!\n";

The program can be made to run by "laundering" the tainted value through
a regular expression: the second example - which still ignores locale
information - runs, creating the file named on its command line if it
can.

     #/usr/local/bin/perl -T

     $tainted_output_file = shift;
     $tainted_output_file =~ m%[\w/]+%;
     $untainted_output_file = $&;

     open(F, ">$untainted_output_file")
         or warn "Open of $untainted_output_file failed: $!\n";

Compare this with a very similar program which is locale-aware:

     #/usr/local/bin/perl -T

     $tainted_output_file = shift;
     use locale;
     $tainted_output_file =~ m%[\w/]+%;
     $localized_output_file = $&;

     open(F, ">$localized_output_file")
         or warn "Open of $localized_output_file failed: $!\n";

This third program fails to run because $& is tainted: it is the result
of a match involving `\w' when `use locale' is in effect.


ENVIRONMENT
===========

PERL_BADLANG
     A string that can suppress Perl's warning about failed locale
     settings at startup.  Failure can occur if the locale support in
     the operating system is lacking (broken) is some way - or if you
     mistyped the name of a locale when you set up your environment.  If
     this environment variable is absent, or has a value which does not
     evaluate to integer zero - that is "0" or "" - Perl will complain
     about locale setting failures.

     NOTE: PERL_BADLANG only gives you a way to hide the warning
     message.  The message tells about some problem in your system's
     locale support, and you should investigate what the problem is.

The following environment variables are not specific to Perl: They are
part of the standardized (ISO C, XPG4, POSIX 1.c) setlocale() method for
controlling an application's opinion on data.

LC_ALL
     LC_ALL is the "override-all" locale environment variable. If it is
     set, it overrides all the rest of the locale environment variables.

LC_CTYPE
     In the absence of LC_ALL, LC_CTYPE chooses the character type
     locale.  In the absence of both LC_ALL and LC_CTYPE, LANG chooses
     the character type locale.

LC_COLLATE
     In the absence of LC_ALL, LC_COLLATE chooses the collation
     (sorting) locale.  In the absence of both LC_ALL and LC_COLLATE,
     LANG chooses the collation locale.

LC_MONETARY
     In the absence of LC_ALL, LC_MONETARY chooses the monetary
     formatting locale.  In the absence of both LC_ALL and LC_MONETARY,
     LANG chooses the monetary formatting locale.

LC_NUMERIC
     In the absence of LC_ALL, LC_NUMERIC chooses the numeric format
     locale.  In the absence of both LC_ALL and LC_NUMERIC, LANG chooses
     the numeric format.

LC_TIME
     In the absence of LC_ALL, LC_TIME chooses the date and time
     formatting locale.  In the absence of both LC_ALL and LC_TIME, LANG
     chooses the date and time formatting locale.

LANG
     LANG is the "catch-all" locale environment variable. If it is set,
     it is used as the last resort after the overall LC_ALL and the
     category-specific `LC_...'.


NOTES
=====


Backward compatibility
----------------------

Versions of Perl prior to 5.004 *mostly* ignored locale information,
generally behaving as if something similar to the `"C"' locale (see
`The setlocale function' in this node) was always in force, even if the program
environment suggested otherwise.  By default, Perl still behaves this
way so as to maintain backward compatibility.  If you want a Perl
application to pay attention to locale information, you *must* use
the `use locale' pragma (see `The use locale Pragma' in this node) to
instruct it to do so.

Versions of Perl from 5.002 to 5.003 did use the LC_CTYPE information if
that was available, that is, `\w' did understand what are the letters
according to the locale environment variables.  The problem was that the
user had no control over the feature: if the C library supported
locales, Perl used them.


I18N:Collate obsolete
---------------------

In versions of Perl prior to 5.004 per-locale collation was possible
using the I18N::Collate library module.  This module is now mildly
obsolete and should be avoided in new applications.  The LC_COLLATE
functionality is now integrated into the Perl core language: One can use
locale-specific scalar data completely normally with `use locale', so
there is no longer any need to juggle with the scalar references of
I18N::Collate.


Sort speed and memory use impacts
---------------------------------

Comparing and sorting by locale is usually slower than the default
sorting; slow-downs of two to four times have been observed.  It will
also consume more memory: once a Perl scalar variable has participated
in any string comparison or sorting operation obeying the locale
collation rules, it will take 3-15 times more memory than before.  (The
exact multiplier depends on the string's contents, the operating system
and the locale.) These downsides are dictated more by the operating
system's implementation of the locale system than by Perl.


write() and LC_NUMERIC
----------------------

Formats are the only part of Perl which unconditionally use information
from a program's locale; if a program's environment specifies an
LC_NUMERIC locale, it is always used to specify the decimal point
character in formatted output.  Formatted output cannot be controlled by
`use locale' because the pragma is tied to the block structure of the
program, and, for historical reasons, formats exist outside that block
structure.


Freely available locale definitions
-----------------------------------

There is a large collection of locale definitions at
`ftp://dkuug.dk/i18n/WG15-collection'.  You should be aware that it is
unsupported, and is not claimed to be fit for any purpose.  If your
system allows the installation of arbitrary locales, you may find the
definitions useful as they are, or as a basis for the development of
your own locales.


I18n and l10n
-------------

"Internationalization" is often abbreviated as *i18n* because its first
and last letters are separated by eighteen others.  (You may guess why
the internalin ... internaliti ... i18n tends to get abbreviated.)  In
the same way, "localization" is often abbreviated to *l10n*.


An imperfect standard
---------------------

Internationalization, as defined in the C and POSIX standards, can be
criticized as incomplete, ungainly, and having too large a granularity.
(Locales apply to a whole process, when it would arguably be more useful
to have them apply to a single thread, window group, or whatever.)  They
also have a tendency, like standards groups, to divide the world into
nations, when we all know that the world can equally well be divided
into bankers, bikers, gamers, and so on.  But, for now, it's the only
standard we've got.  This may be construed as a bug.


BUGS
====


Broken systems
--------------

In certain system environments the operating system's locale support is
broken and cannot be fixed or used by Perl.  Such deficiencies can and
will result in mysterious hangs and/or Perl core dumps when the `use
locale' is in effect.  When confronted with such a system, please report
in excruciating detail to <`perlbug@perl.com'>, and complain to your
vendor: maybe some bug fixes exist for these problems in your operating
system.  Sometimes such bug fixes are called an operating system
upgrade.


SEE ALSO
========

`POSIX (3)' in this node, `POSIX (3)' in this node, `POSIX (3)' in this
node, `POSIX (3)' in this node, `POSIX (3)' in this node, `POSIX (3)' in
this node, `POSIX (3)' in this node, `POSIX (3)' in this node, `POSIX
(3)' in this node, `POSIX (3)' in this node, `POSIX (3)' in this node,
`POSIX (3)' in this node, `POSIX (3)' in this node, `POSIX (3)' in this
node, `POSIX (3)' in this node, `POSIX (3)' in this node


HISTORY
=======

Jarkko Hietaniemi's original `perli18n.pod' heavily hacked by Dominic
Dunlop, assisted by the perl5-porters.

Last update: Wed Jan 22 11:04:58 EST 1997



File: perl.info, Node: perlvar, Next: perlsub, Prev: perlfunc, Up: Top

Perl predefined variables
*************************



NAME
====

perlvar - Perl predefined variables


DESCRIPTION
===========


Predefined Names
----------------

The following names have special meaning to Perl.  Most of the
punctuation names have reasonable mnemonics, or analogues in one of the
shells.  Nevertheless, if you wish to use the long variable names, you
just need to say

     use English;

at the top of your program.  This will alias all the short names to the
long names in the current package.  Some of them even have medium names,
generally borrowed from *awk*.

To go a step further, those variables that depend on the currently
selected filehandle may instead be set by calling an object method on
the FileHandle object.  (Summary lines below for this contain the word
HANDLE.)  First you must say

     use FileHandle;

after which you may use either

     method HANDLE EXPR

or

     HANDLE->method(EXPR)

Each of the methods returns the old value of the FileHandle attribute.
The methods each take an optional EXPR, which if supplied specifies the
new value for the FileHandle attribute in question.  If not supplied,
most of the methods do nothing to the current value, except for
autoflush(), which will assume a 1 for you, just to be different.

A few of these variables are considered "read-only".  This means that if
you try to assign to this variable, either directly or indirectly
through a reference, you'll raise a run-time exception.

$ARG
$_
     The default input and pattern-searching space.  The following pairs
     are equivalent:

          while (<>) {...}	# equivalent in only while!
          while (defined($_ = <>)) {...}

          /^Subject:/
          $_ =~ /^Subject:/

          tr/a-z/A-Z/
          $_ =~ tr/a-z/A-Z/

          chop
          chop($_)

     Here are the places where Perl will assume $_ even if you don't use
     it:

        * Various unary functions, including functions like ord() and
          int(), as well as the all file tests (-f, -d) except for -t,
          which defaults to STDIN.

        * Various list functions like print() and unlink().

        * The pattern matching operations m//, s///, and tr/// when used
          without an `=~' operator.

        * The default iterator variable in a `foreach' loop if no other
          variable is supplied.

        * The implicit iterator variable in the grep() and map()
          functions.

        * The default place to put an input record when a `<FH>'
          operation's result is tested by itself as the sole criterion
          of a `while' test.  Note that outside of a `while' test, this
          will not happen.

     (Mnemonic: underline is understood in certain operations.)

$<*digit*>
     Contains the subpattern from the corresponding set of parentheses
     in the last pattern matched, not counting patterns matched in
     nested blocks that have been exited already.  (Mnemonic: like
     \digit.)  These variables are all read-only.

$MATCH
$&
     The string matched by the last successful pattern match (not
     counting any matches hidden within a BLOCK or eval() enclosed by
     the current BLOCK).  (Mnemonic: like & in some editors.)  This
     variable is read-only.

$PREMATCH
$`
     The string preceding whatever was matched by the last successful
     pattern match (not counting any matches hidden within a BLOCK or
     eval enclosed by the current BLOCK).  (Mnemonic: ``' often precedes
     a quoted string.)  This variable is read-only.

$POSTMATCH
$'
     The string following whatever was matched by the last successful
     pattern match (not counting any matches hidden within a BLOCK or
     eval() enclosed by the current BLOCK).  (Mnemonic: `'' often
     follows a quoted string.)  Example:

          $_ = 'abcdefghi';
          /def/;
          print "$`:$&:$'\n";  	# prints abc:def:ghi

     This variable is read-only.

$LAST_PAREN_MATCH
$+
     The last bracket matched by the last search pattern.  This is
     useful if you don't know which of a set of alternative patterns
     matched.  For example:

          /Version: (.*)|Revision: (.*)/ && ($rev = $+);

     (Mnemonic: be positive and forward looking.)  This variable is
     read-only.

$MULTILINE_MATCHING
@asis{}
     
     Set to 1 to do multi-line matching within a string, 0 to tell Perl
     that it can assume that strings contain a single line, for the
     purpose of optimizing pattern matches.  Pattern matches on strings
     containing multiple newlines can produce confusing results when
     "$*" is 0.  Default is 0.  (Mnemonic: * matches multiple things.)
     Note that this variable influences the interpretation of only "`^'"
     and "`$'".  A literal newline can be searched for even when `$* ==
     0'.

     Use of "$*" is deprecated in modern perls.

input_line_number HANDLE EXPR
$INPUT_LINE_NUMBER
$NR
$.
     The current input line number for the last file handle from which
     you read (or performed a seek or tell on).  An explicit close on a
     filehandle resets the line number.  Because "`<>'" never does an
     explicit close, line numbers increase across ARGV files (but see
     examples under eof()).  Localizing $. has the effect of also
     localizing Perl's notion of "the last read filehandle".  (Mnemonic:
     many programs use "." to mean the current line number.)

input_record_separator HANDLE EXPR
$INPUT_RECORD_SEPARATOR
$RS
$/
     The input record separator, newline by default.  Works like *awk*'s
     RS variable, including treating empty lines as delimiters if set to
     the null string.  (Note: An empty line cannot contain any spaces or
     tabs.)  You may set it to a multi-character string to match a
     multi-character delimiter, or to undef to read to end of file.
     Note that setting it to `"\n\n"' means something slightly different
     than setting it to `""', if the file contains consecutive empty
     lines.  Setting it to `""' will treat two or more consecutive empty
     lines as a single empty line.  Setting it to `"\n\n"' will blindly
     assume that the next input character belongs to the next paragraph,
     even if it's a newline.  (Mnemonic: / is used to delimit line
     boundaries when quoting poetry.)

          undef $/;
          $_ = <FH>; 		# whole file now here
          s/\n[ \t]+/ /g;

     Remember: the value of $/ is a string, not a regexp.  AWK has to be
     better for something :-)

autoflush HANDLE EXPR
$OUTPUT_AUTOFLUSH
$|
     If set to nonzero, forces a flush right away and after every write
     or print on the currently selected output channel.  Default is 0
     (regardless of whether the channel is actually buffered by the
     system or not; $| tells you only whether you've asked Perl
     explicitly to flush after each write).  Note that STDOUT will
     typically be line buffered if output is to the terminal and block
     buffered otherwise.  Setting this variable is useful primarily when
     you are outputting to a pipe, such as when you are running a Perl
     script under rsh and want to see the output as it's happening.
     This has no effect on input buffering.  (Mnemonic: when you want
     your pipes to be piping hot.)

output_field_separator HANDLE EXPR
$OUTPUT_FIELD_SEPARATOR
$OFS
$,
     The output field separator for the print operator.  Ordinarily the
     print operator simply prints out the comma-separated fields you
     specify.  To get behavior more like *awk*, set this variable as you
     would set *awk*'s OFS variable to specify what is printed between
     fields.  (Mnemonic: what is printed when there is a , in your print
     statement.)

output_record_separator HANDLE EXPR
$OUTPUT_RECORD_SEPARATOR
$ORS
$\
     The output record separator for the print operator.  Ordinarily the
     print operator simply prints out the comma-separated fields you
     specify, with no trailing newline or record separator assumed.  To
     get behavior more like *awk*, set this variable as you would set
     *awk*'s ORS variable to specify what is printed at the end of the
     print.  (Mnemonic: you set "$\" instead of adding \n at the end of
     the print.  Also, it's just like $/, but it's what you get "back"
     from Perl.)

$LIST_SEPARATOR
$"
     This is like "$," except that it applies to array values
     interpolated into a double-quoted string (or similar interpreted
     string).  Default is a space.  (Mnemonic: obvious, I think.)

$SUBSCRIPT_SEPARATOR
$SUBSEP
$;
     The subscript separator for multidimensional array emulation.  If
     you refer to a hash element as

          $foo{$a,$b,$c}

     it really means

          $foo{join($;, $a, $b, $c)}

     But don't put

          @foo{$a,$b,$c}	# a slice--note the @

     which means

          ($foo{$a},$foo{$b},$foo{$c})

     Default is "\034", the same as SUBSEP in *awk*.  Note that if your
     keys contain binary data there might not be any safe value for
     "$;".  (Mnemonic: comma (the syntactic subscript separator) is a
     semi-semicolon.  Yeah, I know, it's pretty lame, but "$," is
     already taken for something more important.)

     Consider using "real" multidimensional arrays.

$OFMT
$#
     The output format for printed numbers.  This variable is a half-hearted
     attempt to emulate *awk*'s OFMT variable.  There are times, however,
     when *awk* and Perl have differing notions of what is in fact
     numeric.  The initial value is %.ng, where n is the value
     of the macro DBL_DIG from your system's `float.h'.  This is different from
     *awk*'s default OFMT setting of %.6g, so you need to set "$#"
     explicitly to get *awk*'s value.  (Mnemonic: # is the number sign.)

     Use of "$#" is deprecated.

format_page_number HANDLE EXPR
$FORMAT_PAGE_NUMBER
$%
     The current page number of the currently selected output channel.
     (Mnemonic: % is page number in *nroff*.)

format_lines_per_page HANDLE EXPR
$FORMAT_LINES_PER_PAGE
$=
     The current page length (printable lines) of the currently selected
     output channel.  Default is 60.  (Mnemonic: = has horizontal
     lines.)

format_lines_left HANDLE EXPR
$FORMAT_LINES_LEFT
$-
     The number of lines left on the page of the currently selected
     output channel.  (Mnemonic: lines_on_page - lines_printed.)

format_name HANDLE EXPR
$FORMAT_NAME
$~
     The name of the current report format for the currently selected
     output channel.  Default is name of the filehandle.  (Mnemonic:
     brother to "$^".)

format_top_name HANDLE EXPR
$FORMAT_TOP_NAME
$^
     The name of the current top-of-page format for the currently
     selected output channel.  Default is name of the filehandle with
     _TOP appended.  (Mnemonic: points to top of page.)

format_line_break_characters HANDLE EXPR
$FORMAT_LINE_BREAK_CHARACTERS
$:
     The current set of characters after which a string may be broken to
     fill continuation fields (starting with ^) in a format.  Default is
     " \n-", to break on whitespace or hyphens.  (Mnemonic: a "colon" in
     poetry is a part of a line.)

format_formfeed HANDLE EXPR
$FORMAT_FORMFEED
$^L
     What formats output to perform a form feed.  Default is \f.

$ACCUMULATOR
$^A
     The current value of the write() accumulator for format() lines.  A
     format contains formline() commands that put their result into $^A.
     After calling its format, write() prints out the contents of $^A
     and empties.  So you never actually see the contents of $^A unless
     you call formline() yourself and then look at it.  See *Note
     Perlform: perlform, and `formline()', *Note Perlfunc: perlfunc,.

$CHILD_ERROR
$?
     The status returned by the last pipe close, backtick (```') command,
     or system() operator.  Note that this is the status word returned by
     the wait() system call (or else is made up to look like it).  Thus,
     the exit value of the subprocess is actually (`$? >> 8'), and
     `$? & 255' gives which signal, if any, the process died from, and
     whether there was a core dump.  (Mnemonic: similar to *sh* and
     *ksh*.)

     Note that if you have installed a signal handler for `SIGCHLD', the
     value of $? will usually be wrong outside that handler.

     Inside an END subroutine $? contains the value that is going to be
     given to `exit()'.  You can modify $? in an END subroutine to
     change the exit status of the script.

     Under VMS, the pragma `use vmsish 'status'' makes $? reflect the
     actual VMS exit status, instead of the default emulation of POSIX
     status.

$OS_ERROR
$ERRNO
$!
     If used in a numeric context, yields the current value of errno,
     with all the usual caveats.  (This means that you shouldn't depend
     on the value of "$!" to be anything in particular unless you've
     gotten a specific error return indicating a system error.)  If used
     in a string context, yields the corresponding system error string.
     You can assign to "$!" to set errno if, for instance, you want "$!"
     to return the string for error n, or you want to set the exit value
     for the die() operator.  (Mnemonic: What just went bang?)

$EXTENDED_OS_ERROR
$^E
     More specific information about the last system error than that
     provided by $!, if available.  (If not, it's just $! again, except
     under OS/2.)  At the moment, this differs from $! under only VMS
     and OS/2, where it provides the VMS status value from the last
     system error, and OS/2 error code of the last call to OS/2 API
     which was not directed via CRT.  The caveats mentioned in the
     description of $! apply here, too.  (Mnemonic: Extra error
     explanation.)

     Note that under OS/2 $! and $^E do not track each other, so if an
     OS/2-specific call is performed, you may need to check both.

$EVAL_ERROR
$@
     The Perl syntax error message from the last eval() command.  If
     null, the last eval() parsed and executed correctly (although the
     operations you invoked may have failed in the normal fashion).
     (Mnemonic: Where was the syntax error "at"?)

     Note that warning messages are not collected in this variable.  You
     can, however, set up a routine to process warnings by setting
     `$SIG{__WARN__}' as described below.

$PROCESS_ID
$PID
$$
     The process number of the Perl running this script.  (Mnemonic:
     same as shells.)

$REAL_USER_ID
$UID
$<
     The real uid of this process.  (Mnemonic: it's the uid you came
     *FROM*, if you're running setuid.)

$EFFECTIVE_USER_ID
$EUID
$>
     The effective uid of this process.  Example:

          $< = $>;		# set real to effective uid
          ($<,$>) = ($>,$<);	# swap real and effective uid

     (Mnemonic: it's the uid you went TO, if you're running setuid.)
     Note: "`$<'" and "`$>'" can be swapped only on machines supporting
     setreuid().

$REAL_GROUP_ID
$GID
$(
     The real gid of this process.  If you are on a machine that
     supports membership in multiple groups simultaneously, gives a
     space separated list of groups you are in.  The first number is the
     one returned by getgid(), and the subsequent ones by getgroups(),
     one of which may be the same as the first number.

     However, a value assigned to "$(" must be a single number used to
     set the real gid.  So the value given by "$(" should *not* be
     assigned back to "$(" without being forced numeric, such as by
     adding zero.

     (Mnemonic: parentheses are used to *GROUP* things.  The real gid is
     the group you *LEFT*, if you're running setgid.)

$EFFECTIVE_GROUP_ID
$EGID
$)
     The effective gid of this process.  If you are on a machine that
     supports membership in multiple groups simultaneously, gives a
     space separated list of groups you are in.  The first number is the
     one returned by getegid(), and the subsequent ones by getgroups(),
     one of which may be the same as the first number.

     Similarly, a value assigned to "$)" must also be a space-separated
     list of numbers.  The first number is used to set the effective
     gid, and the rest (if any) are passed to setgroups().  To get the
     effect of an empty list for setgroups(), just repeat the new
     effective gid; that is, to force an effective gid of 5 and an
     effectively empty setgroups() list, say ` $) = "5 5" '.

     (Mnemonic: parentheses are used to *GROUP* things.  The effective
     gid is the group that's *RIGHT* for you, if you're running setgid.)

     Note: "`$<'", "`$>'", "$(" and "$)" can be set only on machines
     that support the corresponding *set[re][ug]id()* routine.  "$(" and
     "$)" can be swapped only on machines supporting setregid().

$PROGRAM_NAME
$0
     Contains the name of the file containing the Perl script being
     executed.  On some operating systems assigning to "$0" modifies the
     argument area that the ps(1) program sees.  This is more useful as
     a way of indicating the current program state than it is for hiding
     the program you're running.  (Mnemonic: same as *sh* and *ksh*.)

$[
     The index of the first element in an array, and of the first
     character in a substring.  Default is 0, but you could set it to 1
     to make Perl behave more like *awk* (or Fortran) when subscripting
     and when evaluating the index() and substr() functions.  (Mnemonic:
     [ begins subscripts.)

     As of Perl 5, assignment to "$[" is treated as a compiler
     directive, and cannot influence the behavior of any other file.
     Its use is discouraged.

$PERL_VERSION
$]
     The version + patchlevel / 1000 of the Perl interpreter.  This
     variable can be used to determine whether the Perl interpreter
     executing a script is in the right range of versions.  (Mnemonic:
     Is this version of perl in the right bracket?)  Example:

          warn "No checksumming!\n" if $] < 3.019;

     See also the documentation of `use VERSION' and `require VERSION'
     for a convenient way to fail if the Perl interpreter is too old.

$DEBUGGING
$^D
     The current value of the debugging flags.  (Mnemonic: value of -D
     switch.)

$SYSTEM_FD_MAX
$^F
     The maximum system file descriptor, ordinarily 2.  System file
     descriptors are passed to exec()ed processes, while higher file
     descriptors are not.  Also, during an open(), system file
     descriptors are preserved even if the open() fails.  (Ordinary file
     descriptors are closed before the open() is attempted.)  Note that
     the close-on-exec status of a file descriptor will be decided
     according to the value of $^F at the time of the open, not the time
     of the exec.

$^H
     The current set of syntax checks enabled by `use strict'.  See the
     documentation of strict for more details.

$INPLACE_EDIT
$^I
     The current value of the inplace-edit extension.  Use undef to
     disable inplace editing.  (Mnemonic: value of -i switch.)

$OSNAME
$^O
     The name of the operating system under which this copy of Perl was
     built, as determined during the configuration process.  The value
     is identical to `$Config{'osname'}'.

$PERLDB
$^P
     The internal variable for debugging support.  Different bits mean
     the following (subject to change):

     0x01
          Debug subroutine enter/exit.

     0x02
          Line-by-line debugging.

     0x04
          Switch off optimizations.

     0x08
          Preserve more data for future interactive inspections.

     0x10
          Keep info about source lines on which a subroutine is defined.

     0x20
          Start with single-step on.

     Note that some bits may be relevent at compile-time only, some at
     run-time only. This is a new mechanism and the details may change.

$BASETIME
$^T
     The time at which the script began running, in seconds since the
     epoch (beginning of 1970).  The values returned by the -M, *-A*,
     and *-C* filetests are based on this value.

$WARNING
$^W
     The current value of the warning switch, either TRUE or FALSE.
     (Mnemonic: related to the -w switch.)

$EXECUTABLE_NAME
$^X
     The name that the Perl binary itself was executed as, from C's
     `argv[0]'.

$ARGV
     contains the name of the current file when reading from <>.

@ARGV
     The array @ARGV contains the command line arguments intended for
     the script.  Note that `$#ARGV' is the generally number of
     arguments minus one, because `$ARGV[0]' is the first argument,
     *NOT* the command name.  See "$0" for the command name.

@INC
     The array @INC contains the list of places to look for Perl scripts
     to be evaluated by the `do EXPR', require, or use constructs.  It
     initially consists of the arguments to any -I command line
     switches, followed by the default Perl library, probably
     `/usr/local/lib/perl', followed by ".", to represent the current
     directory.  If you need to modify this at runtime, you should use
     the `use lib' pragma to get the machine-dependent library properly
     loaded also:

          use lib '/mypath/libdir/';
          use SomeMod;

%INC
     The hash %INC contains entries for each filename that has been
     included via do or require.  The key is the filename you specified,
     and the value is the location of the file actually found.  The
     require command uses this array to determine whether a given file
     has already been included.

$ENV{expr}
     The hash %ENV contains your current environment.  Setting a value
     in `ENV' changes the environment for child processes.

$SIG{expr}
     The hash %SIG is used to set signal handlers for various signals.
     Example:

          sub handler {	# 1st argument is signal name
          	local($sig) = @_;
          	print "Caught a SIG$sig--shutting down\n";
          	close(LOG);
          	exit(0);
          }

          $SIG{'INT'} = 'handler';
          $SIG{'QUIT'} = 'handler';
          ...
          $SIG{'INT'} = 'DEFAULT';	# restore default action
          $SIG{'QUIT'} = 'IGNORE';	# ignore SIGQUIT

     The %SIG array contains values for only the signals actually set
     within the Perl script.  Here are some other examples:

          $SIG{PIPE} = Plumber;       # SCARY!!
          $SIG{"PIPE"} = "Plumber";   # just fine, assumes main::Plumber
          $SIG{"PIPE"} = \&Plumber;   # just fine; assume current Plumber
          $SIG{"PIPE"} = Plumber();   # oops, what did Plumber() return??

     The one marked scary is problematic because it's a bareword, which
     means sometimes it's a string representing the function, and
     sometimes it's going to call the subroutine call right then and
     there!  Best to be sure and quote it or take a reference to it.
     *Plumber works too.  See *Note Perlsub: perlsub,.

     If your system has the sigaction() function then signal handlers
     are installed using it.  This means you get reliable signal
     handling.  If your system has the SA_RESTART flag it is used when
     signals handlers are installed.  This means that system calls for
     which it is supported continue rather than returning when a signal
     arrives.  If you want your system calls to be interrupted by signal
     delivery then do something like this:

          use POSIX ':signal_h';

          my $alarm = 0;
          sigaction SIGALRM, new POSIX::SigAction sub { $alarm = 1 }
          	or die "Error setting SIGALRM handler: $!\n";

     See *Note POSIX: (pm.info)POSIX,.

     Certain internal hooks can be also set using the %SIG hash.  The
     routine indicated by `$SIG{__WARN__}' is called when a warning
     message is about to be printed.  The warning message is passed as
     the first argument.  The presence of a __WARN__ hook causes the
     ordinary printing of warnings to STDERR to be suppressed.  You can
     use this to save warnings in a variable, or turn warnings into
     fatal errors, like this:

          local $SIG{__WARN__} = sub { die $_[0] };
          eval $proggie;

     The routine indicated by `$SIG{__DIE__}' is called when a fatal
     exception is about to be thrown.  The error message is passed as
     the first argument.  When a __DIE__ hook routine returns, the
     exception processing continues as it would have in the absence of
     the hook, unless the hook routine itself exits via a goto, a loop
     exit, or a die().  The `__DIE__' handler is explicitly disabled
     during the call, so that you can die from a `__DIE__' handler.
     Similarly for `__WARN__'.  See `die', *Note Perlfunc: perlfunc,,
     `warn', *Note Perlfunc: perlfunc, and `eval', *Note Perlfunc:
     perlfunc,.

$^M
     By default, running out of memory it is not trappable.  However, if
     compiled for this, Perl may use the contents of $^M as an emergency
     pool after die()ing with this message.  Suppose that your Perl were
     compiled with -DPERL_EMERGENCY_SBRK and used Perl's malloc.  Then

          $^M = 'a' x (1<<16);

     would allocate a 64K buffer for use when in emergency.  See the
     `INSTALL' file for information on how to enable this option.  As a
     disincentive to casual use of this advanced feature, there is no
     *Note English: (pm.info)English, long name for this variable.




