Info file: pm.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `bigpm.texi'
using `texinfmt.el' version 2.32 of 19 November 1993.





File: pm.info, Node: ExtUtils/DynaLib/Struct, Next: ExtUtils/Embed, Prev: ExtUtils/DynaLib, Up: Module List

Tool for handling the C `struct' data type
******************************************



NAME
====

ExtUtils::DynaLib::Struct - Tool for handling the C `struct' data type


SYNOPSIS
========

     use ExtUtils::DynaLib::Struct;

     Define ExtUtils::DynaLib::Struct(
     	$struct_tag,
     	$template0, \@field_names0,
     	[$template1, \@field_names1,]
     	... );

     $rstruct = tie( $struct, $struct_tag [, @initializer_list] );
     $value = $rstruct->my_field();
     $rstruct->my_field( $new_value );

     $pointer_to_struct = pack( 'p', $struct );
     $struct = $new_struct;  # assigns all fields at once

     # after passing pointer-to-struct to a C function:
     $rstruct->Unpack();
     $returned_value = $rstruct->my_field();


DESCRIPTION
===========

When mixing Perl and C, the conversion of data types can be rather
tedious and error-prone.  This module provides an abstraction from
Perl's pack and unpack operators for using structures whose member data
types and positions do not change.

Here are some examples of C code that deals with a `struct'.  On the
right are some possible Perl equivalents.

     C				Perl
     -				----
     typedef struct {		use ExtUtils::DynaLib::Struct;
     	int	m_int;		Define ExtUtils::DynaLib::Struct(
     	double	m_double;	    'Foo',
     	char *	m_string;	    'i' => ['m_int'],
     } Foo;			    'd' => ['m_double'],
     				    'p' => ['m_string'] );
     				# or, equivalently,
     				Define ExtUtils::DynaLib::Struct('Foo',
     				    'idp', [qw(m_int m_double m_string)]);

     Foo foo;
     Foo *pfoo = &foo;		$rfoo = tie ($foo, 'Foo');

     i = pfoo->m_int;		$i = $rfoo->m_int;

     d = foo.m_double;		$d = (tied $foo)->m_double;

     pfoo->m_string = "hi";	$rfoo->m_string("hi");

     Foo bar;			tie ($bar, 'Foo');
     bar = foo;			$bar = $foo;

     void do_foo(Foo *arg);	use ExtUtils::DynaLib;
     				$lib = new ExtUtils::DynaLib("-lfoo");
     				$do_foo = $lib->DeclareSub("do_foo","","P");
     				# or you could write an XSUB.

     do_foo(&foo);		&$do_foo($foo);

     returned_i = foo.m_int;	$rfoo->Unpack();
     				$returned_i = $rfoo->m_int;


BUGS
====

Data member access is through autoloaded methods, so actual existing
methods are not allowed as structure member names.  Currently, the
illegal names are AUTOLOAD, TIESCALAR, FETCH, STORE, and Unpack.

The names of Structs themselves must be allowable package names.  Using
an existing package name will cause problems.

`struct's mean different things to different C compilers on different
machines.  Use caution when assigning pack codes to C data types.


SEE ALSO
========

perlfunc(1) (for pack), perlref(1), perltie(1).




File: pm.info, Node: ExtUtils/Embed, Next: ExtUtils/Install, Prev: ExtUtils/DynaLib/Struct, Up: Module List

Utilities for embedding Perl in C/C++ applications
**************************************************



NAME
====

ExtUtils::Embed - Utilities for embedding Perl in C/C++ applications


SYNOPSIS
========

     perl -MExtUtils::Embed -e xsinit 
     perl -MExtUtils::Embed -e ldopts 


DESCRIPTION
===========

ExtUtils::Embed provides utility functions for embedding a Perl
interpreter and extensions in your C/C++ applications.  Typically, an
application *Makefile* will invoke ExtUtils::Embed functions while
building your application.


@EXPORT
=======

ExtUtils::Embed exports the following functions:

xsinit(), ldopts(), ccopts(), perl_inc(), ccflags(), ccdlflags(),
xsi_header(), xsi_protos(), xsi_body()


FUNCTIONS
=========

xsinit()
     Generate C/C++ code for the XS initializer function.

     When invoked as ``perl -MExtUtils::Embed -e xsinit --`' the
     following options are recognized:

     -o <output filename> (Defaults to *perlxsi.c*)

     *-o STDOUT* will print to STDOUT.

     *-std* (Write code for extensions that are linked with the current Perl.)

     Any additional arguments are expected to be names of modules to
     generate code for.

     When invoked with parameters the following are accepted and
     optional:

     `xsinit($filename,$std,[@modules])'

     Where,

     $filename is equivalent to the -o option.

     *$std* is boolean, equivalent to the *-std* option.  

     *[@modules]* is an array ref, same as additional arguments mentioned above.

Examples
          perl -MExtUtils::Embed -e xsinit -- -o xsinit.c Socket

     This will generate code with an *xs_init* function that glues the
     perl *Socket::bootstrap* function to the C *boot_Socket* function
     and writes it to a file named "xsinit.c".

     Note that DynaLoader is a special case where it must call
     *boot_DynaLoader* directly.

          perl -MExtUtils::Embed -e xsinit

     This will generate code for linking with DynaLoader and each static
     extension found in *$Config{static_ext}*.  The code is written to
     the default file name *perlxsi.c*.

          perl -MExtUtils::Embed -e xsinit -- -o xsinit.c -std DBI DBD::Oracle

     Here, code is written for all the currently linked extensions along
     with code for DBI and *DBD::Oracle*.

     If you have a working DynaLoader then there is rarely any need to
     statically link in any other extensions.

ldopts()
     Output arguments for linking the Perl library and extensions to
     your application.

     When invoked as ``perl -MExtUtils::Embed -e ldopts --`' the
     following options are recognized:

     *-std* 

     Output arguments for linking the Perl library and any extensions
     linked with the current Perl.

     -I <path1:path2>

     Search path for ModuleName.a archives.  Default path is
     *@INC*.  Library archives are expected to be found as
     */some/path/auto/ModuleName/ModuleName.a* For example, when
     looking for *Socket.a* relative to a search path, we should find
     *auto/Socket/Socket.a*

     When looking for *DBD::Oracle* relative to a search path, we should
     find *auto/DBD/Oracle/Oracle.a*

     Keep in mind, you can always supply */my/own/path/ModuleName.a* as
     an additional linker argument.

     *--*  <list of linker args>

     Additional linker arguments to be considered.

     Any additional arguments found before the *--* token are expected
     to be names of modules to generate code for.

     When invoked with parameters the following are accepted and
     optional:

     `ldopts($std,[@modules],[@link_args],$path)'

     Where,

     *$std* is boolean, equivalent to the *-std* option.  

     *[@modules]* is equivalent to additional arguments found before the *--* token.

     *[@link_args]* is equivalent to arguments found after the *--* token.

     $path is equivalent to the -I option.

     In addition, when ldopts is called with parameters, it will return
     the argument string rather than print it to STDOUT.

Examples
          perl -MExtUtils::Embed -e ldopts

     This will print arguments for linking with *libperl.a*, DynaLoader
     and extensions found in *$Config{static_ext}*.  This includes
     libraries found in *$Config{libs}* and the first ModuleName.a
     library for each extension that is found by searching *@INC* or the
     path specifed by the -I option.  In addition, when ModuleName.a is
     found, additional linker arguments are picked up from the
     *extralibs.ld* file in the same directory.

          perl -MExtUtils::Embed -e ldopts -- -std Socket

     This will do the same as the above example, along with printing
     additional arguments for linking with the Socket extension.

          perl -MExtUtils::Embed -e ldopts -- DynaLoader

     This will print arguments for linking with just the DynaLoader
     extension and *libperl.a*.

          perl -MExtUtils::Embed -e ldopts -- -std Msql -- -L/usr/msql/lib -lmsql

     Any arguments after the second '--' token are additional linker
     arguments that will be examined for potential conflict.  If there
     is no conflict, the additional arguments will be part of the
     output.

perl_inc()
     For including perl header files this function simply prints:

          -I$Config{archlibexp}/CORE  

     So, rather than having to say:

          perl -MConfig -e 'print "-I$Config{archlibexp}/CORE"'

     Just say:

          perl -MExtUtils::Embed -e perl_inc

ccflags(), ccdlflags()
     These functions simply print $Config{ccflags} and
     $Config{ccdlflags}

ccopts()
     This function combines perl_inc(), ccflags() and ccdlflags() into
     one.

xsi_header()
     This function simply returns a string defining the same *EXTERN_C* macro as
     *perlmain.c* along with #including *perl.h* and *EXTERN.h*.

xsi_protos(@modules)
     This function returns a string of *boot_$ModuleName* prototypes for
     each @modules.

xsi_body(@modules)
     This function returns a string of calls to *newXS()* that glue the
     module *bootstrap* function to *boot_ModuleName* for each @modules.

     xsinit() uses the xsi_* functions to generate most of it's code.


EXAMPLES
========

For examples on how to use ExtUtils::Embed for building C/C++
applications with embedded perl, see the eg/ directory and *Note
Perlembed: (perl.info)perlembed,.


SEE ALSO
========

*Note Perlembed: (perl.info)perlembed,


AUTHOR
======

Doug MacEachern <`dougm@osf.org'>

Based on ideas from Tim Bunce <`Tim.Bunce@ig.co.uk'> and
*minimod.pl* by Andreas Koenig <`k@anna.in-berlin.de'> and Tim Bunce.




File: pm.info, Node: ExtUtils/Install, Next: ExtUtils/Liblist, Prev: ExtUtils/Embed, Up: Module List

install files from here to there
********************************



NAME
====

ExtUtils::Install - install files from here to there


SYNOPSIS
========

*use ExtUtils::Install;*

*install($hashref,$verbose,$nonono);*

*uninstall($packlistfile,$verbose,$nonono);*

*pm_to_blib($hashref);*


DESCRIPTION
===========

Both install() and uninstall() are specific to the way
ExtUtils::MakeMaker handles the installation and deinstallation of perl
modules. They are not designed as general purpose tools.

install() takes three arguments. A reference to a hash, a verbose switch
and a don't-really-do-it switch. The hash ref contains a mapping of
directories: each key/value pair is a combination of directories to be
copied. Key is a directory to copy from, value is a directory to copy
to. The whole tree below the "from" directory will be copied preserving
timestamps and permissions.

There are two keys with a special meaning in the hash: "read" and
"write". After the copying is done, install will write the list of
target files to the file named by `$hashref->{write}'. If there is
another file named by `$hashref->{read}', the contents of this file will
be merged into the written file. The read and the written file may be
identical, but on AFS it is quite likely, people are installing to a
different directory than the one where the files later appear.

install_default() takes one or less arguments.  If no arguments are
specified, it takes $ARGV[0] as if it was specified as an argument.  The
argument is the value of MakeMaker's `FULLEXT' key, like `Tk/Canvas'.
This function calls install() with the same arguments as the defaults
the MakeMaker would use.

The argumement-less form is convenient for install scripts like

     perl -MExtUtils::Install -e install_default Tk/Canvas

Assuming this command is executed in a directory with populated blib
directory, it will proceed as if the blib was build by MakeMaker on this
machine.  This is useful for binary distributions.

uninstall() takes as first argument a file containing filenames to be
unlinked. The second argument is a verbose switch, the third is a
no-don't-really-do-it-now switch.

pm_to_blib() takes a hashref as the first argument and copies all keys
of the hash to the corresponding values efficiently. Filenames with the
extension pm are autosplit. Second argument is the autosplit directory.




File: pm.info, Node: ExtUtils/Liblist, Next: ExtUtils/MM_OS2, Prev: ExtUtils/Install, Up: Module List

determine libraries to use and how to use them
**********************************************



NAME
====

ExtUtils::Liblist - determine libraries to use and how to use them


SYNOPSIS
========

`require ExtUtils::Liblist;'

`ExtUtils::Liblist::ext($self, $potential_libs, $verbose);'


DESCRIPTION
===========

This utility takes a list of libraries in the form `-llib1 -llib2
-llib3' and prints out lines suitable for inclusion in an extension
Makefile.  Extra library paths may be included with the form
`-L/another/path' this will affect the searches for all subsequent
libraries.

It returns an array of four scalar values: EXTRALIBS, BSLOADLIBS,
LDLOADLIBS, and LD_RUN_PATH.  Some of these don't mean anything on VMS
and Win32.  See the details about those platform specifics below.

Dependent libraries can be linked in one of three ways:

   * For static extensions

     by the ld command when the perl binary is linked with the extension
     library. See EXTRALIBS below.

   * For dynamic extensions

     by the ld command when the shared object is built/linked. See
     LDLOADLIBS below.

   * For dynamic extensions

     by the DynaLoader when the shared object is loaded. See BSLOADLIBS
     below.


EXTRALIBS
---------

List of libraries that need to be linked with when linking a perl binary
which includes this extension Only those libraries that actually exist
are included.  These are written to a file and used when linking perl.


LDLOADLIBS and LD_RUN_PATH
--------------------------

List of those libraries which can or must be linked into the shared
library when created using ld. These may be static or dynamic libraries.
LD_RUN_PATH is a colon separated list of the directories in
LDLOADLIBS. It is passed as an environment variable to the process that
links the shared library.


BSLOADLIBS
----------

List of those libraries that are needed but can be linked in dynamically
at run time on this platform.  SunOS/Solaris does not need this because
ld records the information (from LDLOADLIBS) into the object file.  This
list is used to create a .bs (bootstrap) file.


PORTABILITY
===========

This module deals with a lot of system dependencies and has quite a few
architecture specific *if*s in the code.


VMS implementation
------------------

The version of ext() which is executed under VMS differs from the
Unix-OS/2 version in several respects:

   * Input library and path specifications are accepted with or without the
     -l and `-L' prefices used by Unix linkers.  If neither prefix is
     present, a token is considered a directory to search if it is in
     fact a directory, and a library to search for otherwise.  Authors
     who wish their extensions to be portable to Unix or OS/2 should use
     the Unix prefixes, since the Unix-OS/2 version of ext() requires
     them.

   * Wherever possible, shareable images are preferred to object
     libraries, and object libraries to plain object files.  In
     accordance with VMS naming conventions, ext() looks for files named
     libshr and librtl; it also looks for liblib and liblib to
     accomodate Unix conventions used in some ported software.

   * For each library that is found, an appropriate directive for a
     linker options file is generated.  The return values are
     space-separated strings of these directives, rather than elements
     used on the linker command line.

   * LDLOADLIBS and EXTRALIBS are always identical under VMS, and
     BSLOADLIBS and LD_RIN_PATH are always empty.

In addition, an attempt is made to recognize several common Unix library
names, and filter them out or convert them to their VMS equivalents, as
appropriate.

In general, the VMS version of ext() should properly handle input from
extensions originally designed for a Unix or VMS environment.  If you
encounter problems, or discover cases where the search could be
improved, please let us know.


Win32 implementation
--------------------

The version of ext() which is executed under Win32 differs from the
Unix-OS/2 version in several respects:

   * Input library and path specifications are accepted with or without the
     -l and `-L' prefices used by Unix linkers.  `-lfoo' specifies the
     library `foo.lib' and `-Ls:ome\dir' specifies a directory to look
     for the libraries that follow.  If neither prefix is present, a
     token is considered a directory to search if it is in fact a
     directory, and a library to search for otherwise.  The
     `$Config{lib_ext}' suffix will be appended to any entries that are
     not directories and don't already have the suffix.  Authors who
     wish their extensions to be portable to Unix or OS/2 should use the
     Unix prefixes, since the Unix-OS/2 version of ext() requires them.

   * Entries cannot be plain object files, as many Win32 compilers will
     not handle object files in the place of libraries.

   * If `$potential_libs' is empty, the return value will be empty.
     Otherwise, the libraries specified by `$Config{libs}' (see
     Config.pm) will be appended to the list of `$potential_libs'.  The
     libraries will be searched for in the directories specified in
     `$potential_libs' as well as in `$Config{libpth}'. For each library
     that is found, a space-separated list of fully qualified library
     pathnames is generated.  You may specify an entry that matches
     `/:nodefault/i' in `$potential_libs' to disable the appending of
     default libraries found in `$Config{libs}' (this should be only
     needed very rarely).

   * The libraries specified may be a mixture of static libraries and
     import libraries (to link with DLLs).  Since both kinds are used
     pretty transparently on the win32 platform, we do not attempt to
     distinguish between them.

   * LDLOADLIBS and EXTRALIBS are always identical under Win32, and
     BSLOADLIBS and LD_RUN_PATH are always empty (this may change in
     future).


SEE ALSO
========

*Note ExtUtils/MakeMaker: ExtUtils/MakeMaker,




File: pm.info, Node: ExtUtils/MM_OS2, Next: ExtUtils/MM_Unix, Prev: ExtUtils/Liblist, Up: Module List

methods to override UN*X behaviour in ExtUtils::MakeMaker
*********************************************************



NAME
====

ExtUtils::MM_OS2 - methods to override UN*X behaviour in
ExtUtils::MakeMaker


SYNOPSIS
========

     use ExtUtils::MM_OS2; # Done internally by ExtUtils::MakeMaker if needed


DESCRIPTION
===========

See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.




File: pm.info, Node: ExtUtils/MM_Unix, Next: ExtUtils/MM_VMS, Prev: ExtUtils/MM_OS2, Up: Module List

methods used by ExtUtils::MakeMaker
***********************************



NAME
====

ExtUtils::MM_Unix - methods used by ExtUtils::MakeMaker


SYNOPSIS
========

`require ExtUtils::MM_Unix;'


DESCRIPTION
===========

The methods provided by this package are designed to be used in
conjunction with ExtUtils::MakeMaker. When MakeMaker writes a Makefile,
it creates one or more objects that inherit their methods from a package
`MM'. MM itself doesn't provide any methods, but it ISA
ExtUtils::MM_Unix class. The inheritance tree of MM lets operating
specific packages take the responsibility for all the methods provided
by MM_Unix. We are trying to reduce the number of the necessary
overrides by defining rather primitive operations within
ExtUtils::MM_Unix.

If you are going to write a platform specific MM package, please try to
limit the necessary overrides to primitive methods, and if it is not
possible to do so, let's work out how to achieve that gain.

If you are overriding any of these methods in your Makefile.PL (in the
MY class), please report that to the makemaker mailing list. We are
trying to minimize the necessary method overrides and switch to data
driven Makefile.PLs wherever possible. In the long run less methods will
be overridable via the MY class.


METHODS
=======

The following description of methods is still under development. Please
refer to the code for not suitably documented sections and complain
loudly to the makemaker mailing list.

Not all of the methods below are overridable in a
Makefile.PL. Overridable methods are marked as (o). All methods are
overridable by a platform specific MM_*.pm file (See
*Note ExtUtils/MM_VMS: ExtUtils/MM_VMS,) and *Note ExtUtils/MM_OS2: ExtUtils/MM_OS2,).


Preloaded methods
-----------------

canonpath
     No physical check on the filesystem, but a logical cleanup of a
     path. On UNIX eliminated successive slashes and successive "/.".

catdir
     Concatenate two or more directory names to form a complete path
     ending with a directory. But remove the trailing slash from the
     resulting string, because it doesn't look good, isn't necessary and
     confuses OS2. Of course, if this is the root directory, don't cut
     off the trailing slash :-)

catfile
     Concatenate one or more directory names and a filename to form a
     complete path ending with a filename

curdir
     Returns a string representing of the current directory.  "." on
     UNIX.

rootdir
     Returns a string representing of the root directory.  "/" on UNIX.

updir
     Returns a string representing of the parent directory.  ".." on
     UNIX.


SelfLoaded methods
------------------

c_o (o)
     Defines the suffix rules to compile different flavors of C files to
     object files.

cflags (o)
     Does very much the same as the cflags script in the perl
     distribution. It doesn't return the whole compiler command line,
     but initializes all of its parts. The const_cccmd method then
     actually returns the definition of the CCCMD macro which uses these
     parts.

clean (o)
     Defines the clean target.

const_cccmd (o)
     Returns the full compiler call for C programs and stores the
     definition in CONST_CCCMD.

const_config (o)
     Defines a couple of constants in the Makefile that are imported
     from %Config.

const_loadlibs (o)
     Defines EXTRALIBS, LDLOADLIBS, BSLOADLIBS, LD_RUN_PATH. See
     *Note ExtUtils/Liblist: ExtUtils/Liblist, for details.

constants (o)
     Initializes lots of constants and .SUFFIXES and .PHONY

depend (o)
     Same as macro for the depend attribute.

dir_target (o)
     Takes an array of directories that need to exist and returns a
     Makefile entry for a .exists file in these directories. Returns
     nothing, if the entry has already been processed. We're helpless
     though, if the same directory comes as $(FOO) _and_ as "bar". Both
     of them get an entry, that's why we use "::".

dist (o)
     Defines a lot of macros for distribution support.

dist_basics (o)
     Defines the targets distclean, distcheck, skipcheck, manifest.

dist_ci (o)
     Defines a check in target for RCS.

dist_core (o)
     Defeines the targets dist, tardist, zipdist, uutardist, shdist

dist_dir (o)
     Defines the scratch directory target that will hold the
     distribution before tar-ing (or shar-ing).

dist_test (o)
     Defines a target that produces the distribution in the
     scratchdirectory, and runs 'perl Makefile.PL; make ;make test' in
     that subdirectory.

dlsyms (o)
     Used by AIX and VMS to define DL_FUNCS and DL_VARS and write the
     *.exp files.

dynamic (o)
     Defines the dynamic target.

dynamic_bs (o)
     Defines targets for bootstrap files.

dynamic_lib (o)
     Defines how to produce the *.so (or equivalent) files.

exescan
     Deprecated method. Use libscan instead.

extliblist
     Called by init_others, and calls ext ExtUtils::Liblist. See
     *Note ExtUtils/Liblist: ExtUtils/Liblist, for details.

file_name_is_absolute
     Takes as argument a path and returns true, if it is an absolute
     path.

find_perl
     Finds the executables PERL and FULLPERL


Methods to actually produce chunks of text for the Makefile
-----------------------------------------------------------

The methods here are called for each MakeMaker object in the order
specified by @ExtUtils::MakeMaker::MM_Sections.

fixin
     Inserts the sharpbang or equivalent magic number to a script

force (o)
     Just writes FORCE:

guess_name
     Guess the name of this package by examining the working directory's
     name. MakeMaker calls this only if the developer has not supplied a
     NAME attribute.

has_link_code
     Returns true if C, XS, MYEXTLIB or similar objects exist within
     this object that need a compiler. Does not descend into
     subdirectories as needs_linking() does.

init_dirscan
     Initializes DIR, XS, PM, C, O_FILES, H, PL_FILES, MAN*PODS,
     EXE_FILES.

init_main
     Initializes NAME, FULLEXT, BASEEXT, PARENT_NAME, DLBASE, PERL_SRC,
     PERL_LIB, PERL_ARCHLIB, PERL_INC, INSTALLDIRS, INST_*, INSTALL*,
     PREFIX, CONFIG, AR, AR_STATIC_ARGS, LD, OBJ_EXT, LIB_EXT, EXE_EXT,
     MAP_TARGET, LIBPERL_A, VERSION_FROM, VERSION, DISTNAME,
     VERSION_SYM.

init_others
     Initializes EXTRALIBS, BSLOADLIBS, LDLOADLIBS, LIBS, LD_RUN_PATH,
     OBJECT, BOOTDEP, PERLMAINCC, LDFROM, LINKTYPE, NOOP,
     FIRST_MAKEFILE, MAKEFILE, NOECHO, RM_F, RM_RF, TEST_F, TOUCH, CP,
     MV, CHMOD, UMASK_NULL

install (o)
     Defines the install target.

installbin (o)
     Defines targets to install EXE_FILES.

libscan (o)
     Takes a path to a file that is found by init_dirscan and returns
     false if we don't want to include this file in the library. Mainly
     used to exclude RCS, CVS, and SCCS directories from installation.

linkext (o)
     Defines the linkext target which in turn defines the LINKTYPE.

lsdir
     Takes as arguments a directory name and a regular
     expression. Returns all entries in the directory that match the
     regular expression.

macro (o)
     Simple subroutine to insert the macros defined by the macro
     attribute into the Makefile.

makeaperl (o)
     Called by staticmake. Defines how to write the Makefile to produce
     a static new perl.

     By default the Makefile produced includes all the static extensions
     in the perl library. (Purified versions of library files, e.g.,
     DynaLoader_pure_p1_c0_032.a are automatically ignored to avoid link
     errors.)

makefile (o)
     Defines how to rewrite the Makefile.

manifypods (o)
     Defines targets and routines to translate the pods into manpages
     and put them into the INST_* directories.

maybe_command
     Returns true, if the argument is likely to be a command.

maybe_command_in_dirs
     method under development. Not yet used. Ask Ilya :-)

needs_linking (o)
     Does this module need linking? Looks into subdirectory objects (see
     also has_link_code())

nicetext
     misnamed method (will have to be changed). The MM_Unix method just
     returns the argument without further processing.

     On VMS used to insure that colons marking targets are preceded by
     space - most Unix Makes don't need this, but it's necessary under
     VMS to distinguish the target delimiter from a colon appearing as
     part of a filespec.

parse_version
     parse a file and return what you think is $VERSION in this file set
     to

pasthru (o)
     Defines the string that is passed to recursive make calls in
     subdirectories.

path
     Takes no argument, returns the environment variable PATH as an
     array.

perl_script
     Takes one argument, a file name, and returns the file name, if the
     argument is likely to be a perl script. On MM_Unix this is true for
     any ordinary, readable file.

perldepend (o)
     Defines the dependency from all *.h files that come with the perl
     distribution.

pm_to_blib
     Defines target that copies all files in the hash PM to their
     destination and autosplits them. See `DESCRIPTION', *Note
     ExtUtils/Install: ExtUtils/Install,

post_constants (o)
     Returns an empty string per default. Dedicated to overrides from
     within Makefile.PL after all constants have been defined.

post_initialize (o)
     Returns an empty string per default. Used in Makefile.PLs to add
     some chunk of text to the Makefile after the object is initialized.

postamble (o)
     Returns an empty string. Can be used in Makefile.PLs to write some
     text to the Makefile at the end.

prefixify
     Check a path variable in $self from %Config, if it contains a
     prefix, and replace it with another one.

     Takes as arguments an attribute name, a search prefix and a
     replacement prefix. Changes the attribute in the object.

processPL (o)
     Defines targets to run *.PL files.

realclean (o)
     Defines the realclean target.

replace_manpage_separator
     Takes the name of a package, which may be a nested package, in the
     form Foo/Bar and replaces the slash with `::'. Returns the
     replacement.

static (o)
     Defines the static target.

static_lib (o)
     Defines how to produce the *.a (or equivalent) files.

staticmake (o)
     Calls makeaperl.

subdir_x (o)
     Helper subroutine for subdirs

subdirs (o)
     Defines targets to process subdirectories.

test (o)
     Defines the test targets.

test_via_harness (o)
     Helper method to write the test targets

test_via_script (o)
     Other helper method for test.

tool_autosplit (o)
     Defines a simple perl call that runs autosplit. May be deprecated
     by pm_to_blib soon.

tools_other (o)
     Defines SHELL, LD, TOUCH, CP, MV, RM_F, RM_RF, CHMOD, UMASK_NULL in
     the Makefile. Also defines the perl programs MKPATH,
     WARN_IF_OLD_PACKLIST, MOD_INSTALL. DOC_INSTALL, and UNINSTALL.

tool_xsubpp (o)
     Determines typemaps, xsubpp version, prototype behaviour.

top_targets (o)
     Defines the targets all, subdirs, config, and O_FILES

writedoc
     Obsolete, depecated method. Not used since Version 5.21.

xs_c (o)
     Defines the suffix rules to compile XS files to C.

xs_o (o)
     Defines suffix rules to go from XS to object files directly. This
     is only intended for broken make implementations.

perl_archive
     This is internal method that returns path to libperl.a equivalent
     to be linked to dynamic extensions. UNIX does not have one but OS2
     and Win32 do.

export_list
     This is internal method that returns name of a file that is passed
     to linker to define symbols to be exported.  UNIX does not have one
     but OS2 and Win32 do.


SEE ALSO
========

*Note ExtUtils/MakeMaker: ExtUtils/MakeMaker,




File: pm.info, Node: ExtUtils/MM_VMS, Next: ExtUtils/MM_Win32, Prev: ExtUtils/MM_Unix, Up: Module List

methods to override UN*X behaviour in ExtUtils::MakeMaker
*********************************************************



NAME
====

ExtUtils::MM_VMS - methods to override UN*X behaviour in
ExtUtils::MakeMaker


SYNOPSIS
========

     use ExtUtils::MM_VMS; # Done internally by ExtUtils::MakeMaker if needed


DESCRIPTION
===========

See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.


Methods always loaded
---------------------

eliminate_macros
     Expands MM[KS]/Make macros in a text string, using the contents of
     identically named elements of `%$self', and returns the result as a
     file specification in Unix syntax.

fixpath
     Catchall routine to clean up problem MM[SK]/Make macros.  Expands
     macros in any directory specification, in order to avoid
     juxtaposing two VMS-syntax directories when MM[SK] is run.  Also
     expands expressions which are all macro, so that we can tell how
     long the expansion is, and avoid overrunning DCL's command buffer
     when MM[KS] is running.

     If optional second argument has a TRUE value, then the return
     string is a VMS-syntax directory specification, otherwise it is a
     VMS-syntax file specification.

catdir
     Concatenates a list of file specifications, and returns the result
     as a VMS-syntax directory specification.

catfile
     Concatenates a list of file specifications, and returns the result
     as a VMS-syntax directory specification.

wraplist
     Converts a list into a string wrapped at approximately 80 columns.

curdir (override)
     Returns a string representing of the current directory.

rootdir (override)
     Returns a string representing of the root directory.

updir (override)
     Returns a string representing of the parent directory.


SelfLoaded methods
------------------

Those methods which override default MM_Unix methods are marked
"(override)", while methods unique to MM_VMS are marked "(specific)".
For overridden methods, documentation is limited to an explanation of
why this method overrides the MM_Unix method; see the ExtUtils::MM_Unix
documentation for more details.

guess_name (override)
     Try to determine name of extension being built.  We begin with the
     name of the current directory.  Since VMS filenames are
     case-insensitive, however, we look for a `.pm' file whose name
     matches that of the current directory (presumably the 'main' `.pm'
     file for this extension), and try to find a package statement from
     which to obtain the Mixed::Case package name.

find_perl (override)
     Use VMS file specification syntax and CLI commands to find and
     invoke Perl images.

path (override)
     Translate logical name DCL$PATH as a searchlist, rather than trying
     to split string value of `$ENV{'PATH'}'.

maybe_command (override)
     Follows VMS naming conventions for executable files.  If the name
     passed in doesn't exactly match an executable file, appends `.Exe'
     (or equivalent) to check for executable image, and `.Com' to check
     for DCL procedure.  If this fails, checks directories in DCL$PATH
     and finally `Sys$System:' for an executable file having the name
     specified, with or without the `.Exe'-equivalent suffix.

maybe_command_in_dirs (override)
     Uses DCL argument quoting on test command line.

perl_script (override)
     If name passed in doesn't specify a readable file, appends `.com'
     or `.pl' and tries again, since it's customary to have file types
     on all files under VMS.

file_name_is_absolute (override)
     Checks for VMS directory spec as well as Unix separators.

replace_manpage_separator
     Use as separator a character which is legal in a VMS-syntax file
     name.

init_others (override)
     Provide VMS-specific forms of various utility commands, then hand
     off to the default MM_Unix method.

constants (override)
     Fixes up numerous file and directory macros to insure VMS syntax
     regardless of input syntax.  Also adds a few VMS-specific macros
     and makes lists of files comma-separated.

cflags (override)
     Bypass shell script and produce qualifiers for CC directly (but
     warn user if a shell script for this extension exists).  Fold
     multiple /Defines into one, since some C compilers pay attention to
     only one instance of this qualifier on the command line.

const_cccmd (override)
     Adds directives to point C preprocessor to the right place when
     handling #include <sys/foo.h> directives.  Also constructs CC
     command line a bit differently than MM_Unix method.

pm_to_blib (override)
     DCL *still* accepts a maximum of 255 characters on a command line,
     so we write the (potentially) long list of file names to a temp
     file, then persuade Perl to read it instead of the command line to
     find args.

tool_autosplit (override)
     Use VMS-style quoting on command line.

tool_sxubpp (override)
     Use VMS-style quoting on xsubpp command line.

xsubpp_version (override)
     Test xsubpp exit status according to VMS rules ($sts & 1 ==> good)
     rather than Unix rules ($sts == 0 ==> good).

tools_other (override)
     Adds a few MM[SK] macros, and shortens some the installatin
     commands, in order to stay under DCL's 255-character limit.  Also
     changes EQUALIZE_TIMESTAMP to set revision date of target file to
     one second later than source file, since MMK interprets precisely
     equal revision dates for a source and target file as a sign that
     the target needs to be updated.

dist (override)
     Provide VMSish defaults for some values, then hand off to default
     MM_Unix method.

c_o (override)
     Use VMS syntax on command line.  In particular, $(DEFINE) and
     $(PERL_INC) have been pulled into $(CCCMD).  Also use MM[SK]
     macros.

xs_c (override)
     Use MM[SK] macros.

xs_o (override)
     Use MM[SK] macros, and VMS command line for C compiler.

top_targets (override)
     Use VMS quoting on command line for Version_check.

dlsyms (override)
     Create VMS linker options files specifying universal symbols for
     this extension's shareable image, and listing other shareable
     images or libraries to which it should be linked.

dynamic_lib (override)
     Use VMS Link command.

dynamic_bs (override)
     Use VMS-style quoting on Mkbootstrap command line.

static_lib (override)
     Use VMS commands to manipulate object library.

manifypods (override)
     Use VMS-style quoting on command line, and VMS logical name to
     specify fallback location at build time if we can't find pod2man.

processPL (override)
     Use VMS-style quoting on command line.

installbin (override)
     Stay under DCL's 255 character command line limit once again by
     splitting potentially long list of files across multiple lines in
     realclean target.

subdir_x (override)
     Use VMS commands to change default directory.

clean (override)
     Split potentially long list of files across multiple commands (in
     order to stay under the magic command line limit).  Also use MM[SK]
     commands for handling subdirectories.

realclean (override)
     Guess what we're working around?  Also, use MM[SK] for
     subdirectories.

dist_basics (override)
     Use VMS-style quoting on command line.

dist_core (override)
     Syntax for invoking `VMS_Share' differs from that for Unix `shar',
     so `shdist' target actions are VMS-specific.

dist_dir (override)
     Use VMS-style quoting on command line.

dist_test (override)
     Use VMS commands to change default directory, and use VMS-style
     quoting on command line.

install (override)
     Work around DCL's 255 character limit several times,and use
     VMS-style command line quoting in a few cases.

perldepend (override)
     Use VMS-style syntax for files; it's cheaper to just do it directly
     here than to have the MM_Unix method call catfile repeatedly.  Also
     use config.vms as source of original config data if the Perl
     distribution is available; config.sh is an ancillary file under
     VMS.  Finally, if we have to rebuild Config.pm, use MM[SK] to do
     it.

makefile (override)
     Use VMS commands and quoting.

test (override)
     Use VMS commands for handling subdirectories.

test_via_harness (override)
     Use VMS-style quoting on command line.

test_via_script (override)
     Use VMS-style quoting on command line.

makeaperl (override)
     Undertake to build a new set of Perl images using VMS commands.
     Since VMS does dynamic loading, it's not necessary to statically
     link each extension into the Perl image, so this isn't the normal
     build path.  Consequently, it hasn't really been tested, and may
     well be incomplete.

nicetext (override)
     Insure that colons marking targets are preceded by space, in order
     to distinguish the target delimiter from a colon appearing as part
     of a filespec.




File: pm.info, Node: ExtUtils/MM_Win32, Next: ExtUtils/MakeMaker, Prev: ExtUtils/MM_VMS, Up: Module List

methods to override UN*X behaviour in ExtUtils::MakeMaker
*********************************************************



NAME
====

ExtUtils::MM_Win32 - methods to override UN*X behaviour in
ExtUtils::MakeMaker


SYNOPSIS
========

     use ExtUtils::MM_Win32; # Done internally by ExtUtils::MakeMaker if needed


DESCRIPTION
===========

See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.

catfile
     Concatenate one or more directory names and a filename to form a
     complete path ending with a filename

constants (o)
     Initializes lots of constants and .SUFFIXES and .PHONY

static_lib (o)
     Defines how to produce the *.a (or equivalent) files.

dynamic_bs (o)
     Defines targets for bootstrap files.

dynamic_lib (o)
     Defines how to produce the *.so (or equivalent) files.

canonpath
     No physical check on the filesystem, but a logical cleanup of a
     path. On UNIX eliminated successive slashes and successive "/.".

perl_script
     Takes one argument, a file name, and returns the file name, if the
     argument is likely to be a perl script. On MM_Unix this is true for
     any ordinary, readable file.

pm_to_blib
     Defines target that copies all files in the hash PM to their
     destination and autosplits them. See `DESCRIPTION', *Note
     ExtUtils/Install: ExtUtils/Install,

test_via_harness (o)
     Helper method to write the test targets

tool_autosplit (override)
     Use Win32 quoting on command line.

tools_other (o)
     Win32 overrides.

     Defines SHELL, LD, TOUCH, CP, MV, RM_F, RM_RF, CHMOD, UMASK_NULL in
     the Makefile. Also defines the perl programs MKPATH,
     WARN_IF_OLD_PACKLIST, MOD_INSTALL. DOC_INSTALL, and UNINSTALL.

xs_o (o)
     Defines suffix rules to go from XS to object files directly. This
     is only intended for broken make implementations.

top_targets (o)
     Defines the targets all, subdirs, config, and O_FILES

manifypods (o)
     We don't want manpage process.  XXX add pod2html support later.

dist_ci (o)
     Same as MM_Unix version (changes command-line quoting).

dist_core (o)
     Same as MM_Unix version (changes command-line quoting).

pasthru (o)
     Defines the string that is passed to recursive make calls in
     subdirectories.




File: pm.info, Node: ExtUtils/MakeMaker, Next: ExtUtils/Manifest, Prev: ExtUtils/MM_Win32, Up: Module List

create an extension Makefile
****************************



NAME
====

ExtUtils::MakeMaker - create an extension Makefile


SYNOPSIS
========

`use ExtUtils::MakeMaker;'

`WriteMakefile( ATTRIBUTE => VALUE [, ...] );'

which is really

`MM->new(\%att)->flush;'


DESCRIPTION
===========

This utility is designed to write a Makefile for an extension module
from a Makefile.PL. It is based on the Makefile.SH model provided by
Andy Dougherty and the perl5-porters.

It splits the task of generating the Makefile into several subroutines
that can be individually overridden.  Each subroutine returns the text
it wishes to have written to the Makefile.

MakeMaker is object oriented. Each directory below the current directory
that contains a Makefile.PL. Is treated as a separate object. This makes
it possible to write an unlimited number of Makefiles with a single
invocation of WriteMakefile().


How To Write A Makefile.PL
--------------------------

The short answer is: Don't.

     Always begin with h2xs.
     Always begin with h2xs!
     ALWAYS BEGIN WITH H2XS!

even if you're not building around a header file, and even if you don't
have an XS component.

Run h2xs(1) before you start thinking about writing a module. For so
called pm-only modules that consist of `*.pm' files only, h2xs has the
-X switch. This will generate dummy files of all kinds that are useful
for the module developer.

The medium answer is:

     use ExtUtils::MakeMaker;
     WriteMakefile( NAME => "Foo::Bar" );

The long answer is the rest of the manpage :-)


Default Makefile Behaviour
--------------------------

The generated Makefile enables the user of the extension to invoke

     perl Makefile.PL # optionally "perl Makefile.PL verbose"
     make
     make test        # optionally set TEST_VERBOSE=1
     make install     # See below

The Makefile to be produced may be altered by adding arguments of the
form `KEY=VALUE'. E.g.

     perl Makefile.PL PREFIX=/tmp/myperl5

Other interesting targets in the generated Makefile are

     make config     # to check if the Makefile is up-to-date
     make clean      # delete local temp files (Makefile gets renamed)
     make realclean  # delete derived files (including ./blib)
     make ci         # check in all the files in the MANIFEST file
     make dist       # see below the Distribution Support section


make test
---------

MakeMaker checks for the existence of a file named `test.pl' in the
current directory and if it exists it adds commands to the test target
of the generated Makefile that will execute the script with the proper
set of perl -I options.

MakeMaker also checks for any files matching glob("t/*.t"). It will add
commands to the test target of the generated Makefile that execute all
matching files via the *Note Test/Harness: Test/Harness, module with the
-I switches set correctly.


make testdb
-----------

A useful variation of the above is the target `testdb'. It runs the test
under the Perl debugger (see *Note Perldebug: (perl.info)perldebug,). If
the file `test.pl' exists in the current directory, it is used for the
test.

If you want to debug some other testfile, set `TEST_FILE' variable
thusly:

     make testdb TEST_FILE=t/mytest.t

By default the debugger is called using -d option to perl. If you want
to specify some other option, set `TESTDB_SW' variable:

     make testdb TESTDB_SW=-Dx


make install
------------

make alone puts all relevant files into directories that are named by
the macros INST_LIB, INST_ARCHLIB, INST_SCRIPT, INST_MAN1DIR, and
INST_MAN3DIR. All these default to something below ./blib if you are
*not* building below the perl source directory. If you *are*
building below the perl source, INST_LIB and INST_ARCHLIB default to
 ../../lib, and INST_SCRIPT is not defined.

The install target of the generated Makefile copies the files found
below each of the INST_* directories to their INSTALL*
counterparts. Which counterparts are chosen depends on the setting of
INSTALLDIRS according to the following table:

     INSTALLDIRS set to
            	       	        perl   	          site

     INST_ARCHLIB    INSTALLARCHLIB    INSTALLSITEARCH
     INST_LIB        INSTALLPRIVLIB    INSTALLSITELIB
     INST_BIN                  INSTALLBIN
     INST_SCRIPT              INSTALLSCRIPT
     INST_MAN1DIR             INSTALLMAN1DIR
     INST_MAN3DIR             INSTALLMAN3DIR

The INSTALL... macros in turn default to their %Config
($Config{installprivlib}, $Config{installarchlib}, etc.) counterparts.

You can check the values of these variables on your system with

     perl '-V:install.*'

And to check the sequence in which the library directories are searched
by perl, run

     perl -le 'print join $/, @INC'


PREFIX and LIB attribute
------------------------

PREFIX and LIB can be used to set several INSTALL* attributes in one
go. The quickest way to install a module in a non-standard place might
be

     perl Makefile.PL LIB=~/lib

This will install the module's architecture-independent files into
~/lib, the architecture-dependent files into ~/lib/$archname/auto.

Another way to specify many INSTALL directories with a single parameter
is PREFIX.

     perl Makefile.PL PREFIX=~

This will replace the string specified by $Config{prefix} in all
$Config{install*} values.

Note, that in both cases the tilde expansion is done by MakeMaker, not
by perl by default, nor by make. Conflicts between parmeters LIB, PREFIX
and the various INSTALL* arguments are resolved so that XXX

If the user has superuser privileges, and is not working on AFS (Andrew
File System) or relatives, then the defaults for INSTALLPRIVLIB,
INSTALLARCHLIB, INSTALLSCRIPT, etc. will be appropriate, and this
incantation will be the best:

     perl Makefile.PL; make; make test
     make install

make install per default writes some documentation of what has been done
into the file `$(INSTALLARCHLIB)/perllocal.pod'. This feature can be
bypassed by calling make pure_install.


AFS users
---------

will have to specify the installation directories as these most probably
have changed since perl itself has been installed. They will have to do
this by calling

     perl Makefile.PL INSTALLSITELIB=/afs/here/today \
     	INSTALLSCRIPT=/afs/there/now INSTALLMAN3DIR=/afs/for/manpages
     make

Be careful to repeat this procedure every time you recompile an
extension, unless you are sure the AFS installation directories are
still valid.


Static Linking of a new Perl Binary
-----------------------------------

An extension that is built with the above steps is ready to use on
systems supporting dynamic loading. On systems that do not support
dynamic loading, any newly created extension has to be linked together
with the available resources. MakeMaker supports the linking process by
creating appropriate targets in the Makefile whenever an extension is
built. You can invoke the corresponding section of the makefile with

     make perl

That produces a new perl binary in the current directory with all
extensions linked in that can be found in INST_ARCHLIB , SITELIBEXP, and
PERL_ARCHLIB. To do that, MakeMaker writes a new Makefile, on UNIX, this
is called Makefile.aperl (may be system dependent). If you want to force
the creation of a new perl, it is recommended, that you delete this
Makefile.aperl, so the directories are searched-through for linkable
libraries again.

The binary can be installed into the directory where perl normally
resides on your machine with

     make inst_perl

To produce a perl binary with a different name than `perl', either say

     perl Makefile.PL MAP_TARGET=myperl
     make myperl
     make inst_perl

or say

     perl Makefile.PL
     make myperl MAP_TARGET=myperl
     make inst_perl MAP_TARGET=myperl

In any case you will be prompted with the correct invocation of the
`inst_perl' target that installs the new binary into INSTALLBIN.

make inst_perl per default writes some documentation of what has been
done into the file `$(INSTALLARCHLIB)/perllocal.pod'. This can be
bypassed by calling make pure_inst_perl.

Warning: the inst_perl: target will most probably overwrite your
existing perl binary. Use with care!

Sometimes you might want to build a statically linked perl although your
system supports dynamic loading. In this case you may explicitly set the
linktype with the invocation of the Makefile.PL or make:

     perl Makefile.PL LINKTYPE=static    # recommended

or

     make LINKTYPE=static                # works on most systems


Determination of Perl Library and Installation Locations
--------------------------------------------------------

MakeMaker needs to know, or to guess, where certain things are located.
Especially INST_LIB and INST_ARCHLIB (where to put the files during the
make(1) run), PERL_LIB and PERL_ARCHLIB (where to read existing modules
from), and PERL_INC (header files and `libperl*.*').

Extensions may be built either using the contents of the perl source
directory tree or from the installed perl library. The recommended way
is to build extensions after you have run 'make install' on perl
itself. You can do that in any directory on your hard disk that is not
below the perl source tree. The support for extensions below the ext
directory of the perl distribution is only good for the standard
extensions that come with perl.

If an extension is being built below the `ext/' directory of the perl
source then MakeMaker will set PERL_SRC automatically (e.g., `../..').
If PERL_SRC is defined and the extension is recognized as a standard
extension, then other variables default to the following:

     PERL_INC     = PERL_SRC
     PERL_LIB     = PERL_SRC/lib
     PERL_ARCHLIB = PERL_SRC/lib
     INST_LIB     = PERL_LIB
     INST_ARCHLIB = PERL_ARCHLIB

If an extension is being built away from the perl source then MakeMaker
will leave PERL_SRC undefined and default to using the installed copy of
the perl library. The other variables default to the following:

     PERL_INC     = $archlibexp/CORE
     PERL_LIB     = $privlibexp
     PERL_ARCHLIB = $archlibexp
     INST_LIB     = ./blib/lib
     INST_ARCHLIB = ./blib/arch

If perl has not yet been installed then PERL_SRC can be defined on the
command line as shown in the previous section.


Which architecture dependent directory?
---------------------------------------

If you don't want to keep the defaults for the INSTALL* macros,
MakeMaker helps you to minimize the typing needed: the usual
relationship between INSTALLPRIVLIB and INSTALLARCHLIB is determined by
Configure at perl compilation time. MakeMaker supports the user who sets
INSTALLPRIVLIB. If INSTALLPRIVLIB is set, but INSTALLARCHLIB not, then
MakeMaker defaults the latter to be the same subdirectory of
INSTALLPRIVLIB as Configure decided for the counterparts in %Config ,
otherwise it defaults to INSTALLPRIVLIB. The same relationship holds for
INSTALLSITELIB and INSTALLSITEARCH.

MakeMaker gives you much more freedom than needed to configure internal
variables and get different results. It is worth to mention, that
make(1) also lets you configure most of the variables that are used in
the Makefile. But in the majority of situations this will not be
necessary, and should only be done, if the author of a package
recommends it (or you know what you're doing).


Using Attributes and Parameters
-------------------------------

The following attributes can be specified as arguments to
WriteMakefile() or as NAME=VALUE pairs on the command line:

C
     Ref to array of *.c file names. Initialised from a directory scan
     and the values portion of the XS attribute hash. This is not
     currently used by MakeMaker but may be handy in Makefile.PLs.

CCFLAGS
     String that will be included in the compiler call command line
     between the arguments INC and OPTIMIZE.

CONFIG
     Arrayref. E.g. [qw(archname manext)] defines ARCHNAME & MANEXT from
     config.sh. MakeMaker will add to CONFIG the following values
     anyway: ar cc cccdlflags ccdlflags dlext dlsrc ld lddlflags ldflags
     libc lib_ext obj_ext ranlib sitelibexp sitearchexp so

CONFIGURE
     CODE reference. The subroutine should return a hash reference. The
     hash may contain further attributes, e.g. {LIBS => ...}, that have
     to be determined by some evaluation method.

DEFINE
     Something like `"-DHAVE_UNISTD_H"'

DIR
     Ref to array of subdirectories containing Makefile.PLs e.g. [
     'sdbm' ] in ext/SDBM_File

DISTNAME
     Your name for distributing the package (by tar file). This defaults
     to NAME above.

DL_FUNCS
     Hashref of symbol names for routines to be made available as
     universal symbols.  Each key/value pair consists of the package
     name and an array of routine names in that package.  Used only
     under AIX (export lists) and VMS (linker options) at present.  The
     routine names supplied will be expanded in the same way as XSUB
     names are expanded by the XS() macro.  Defaults to

          {"$(NAME)" => ["boot_$(NAME)" ] }

     e.g.

          {"RPC" => [qw( boot_rpcb rpcb_gettime getnetconfigent )],
           "NetconfigPtr" => [ 'DESTROY'] }

DL_VARS
     Array of symbol names for variables to be made available as
     universal symbols.  Used only under AIX (export lists) and VMS
     (linker options) at present.  Defaults to [].  (e.g. [ qw(
     Foo_version Foo_numstreams Foo_tree ) ])

EXCLUDE_EXT
     Array of extension names to exclude when doing a static build.
     This is ignored if INCLUDE_EXT is present.  Consult INCLUDE_EXT for
     more details.  (e.g.  [ qw( Socket POSIX ) ] )

     This attribute may be most useful when specified as a string on the
     commandline: perl Makefile.PL EXCLUDE_EXT='Socket Safe'

EXE_FILES
     Ref to array of executable files. The files will be copied to the
     INST_SCRIPT directory. Make realclean will delete them from there
     again.

NO_VC
     In general any generated Makefile checks for the current version of
     MakeMaker and the version the Makefile was built under. If NO_VC is
     set, the version check is neglected. Do not write this into your
     Makefile.PL, use it interactively instead.

FIRST_MAKEFILE
     The name of the Makefile to be produced. Defaults to the contents
     of MAKEFILE, but can be overridden. This is used for the second
     Makefile that will be produced for the MAP_TARGET.

FULLPERL
     Perl binary able to run this extension.

H
     Ref to array of *.h file names. Similar to C.

IMPORTS
     IMPORTS is only used on OS/2.

INC
     Include file dirs eg: `"-I/usr/5include -I/path/to/inc"'

INCLUDE_EXT
     Array of extension names to be included when doing a static build.
     MakeMaker will normally build with all of the installed extensions
     when doing a static build, and that is usually the desired
     behavior.  If INCLUDE_EXT is present then MakeMaker will build only
     with those extensions which are explicitly mentioned. (e.g.  [ qw(
     Socket POSIX ) ])

     It is not necessary to mention DynaLoader or the current extension
     when filling in INCLUDE_EXT.  If the INCLUDE_EXT is mentioned but
     is empty then only DynaLoader and the current extension will be
     included in the build.

     This attribute may be most useful when specified as a string on the
     commandline: perl Makefile.PL INCLUDE_EXT='POSIX Socket
     Devel::Peek'

INSTALLARCHLIB
     Used by 'make install', which copies files from INST_ARCHLIB to
     this directory if INSTALLDIRS is set to perl.

INSTALLBIN
     Directory to install binary files (e.g. tkperl) into.

INSTALLDIRS
     Determines which of the two sets of installation directories to
     choose: installprivlib and installarchlib versus installsitelib and
     installsitearch. The first pair is chosen with INSTALLDIRS=perl,
     the second with INSTALLDIRS=site. Default is site.

INSTALLMAN1DIR
     This directory gets the man pages at 'make install' time. Defaults
     to $Config{installman1dir}.

INSTALLMAN3DIR
     This directory gets the man pages at 'make install' time. Defaults
     to $Config{installman3dir}.

INSTALLPRIVLIB
     Used by 'make install', which copies files from INST_LIB to this
     directory if INSTALLDIRS is set to perl.

INSTALLSCRIPT
     Used by 'make install' which copies files from INST_SCRIPT to this
     directory.

INSTALLSITELIB
     Used by 'make install', which copies files from INST_LIB to this
     directory if INSTALLDIRS is set to site (default).

INSTALLSITEARCH
     Used by 'make install', which copies files from INST_ARCHLIB to
     this directory if INSTALLDIRS is set to site (default).

INST_ARCHLIB
     Same as INST_LIB for architecture dependent files.

INST_BIN
     Directory to put real binary files during 'make'. These will be
     copied to INSTALLBIN during 'make install'

INST_EXE
     Old name for INST_SCRIPT. Deprecated. Please use INST_SCRIPT if you
     need to use it.

INST_LIB
     Directory where we put library files of this extension while
     building it.

INST_MAN1DIR
     Directory to hold the man pages at 'make' time

INST_MAN3DIR
     Directory to hold the man pages at 'make' time

INST_SCRIPT
     Directory, where executable files should be installed during
     'make'. Defaults to "./blib/bin", just to have a dummy location
     during testing. make install will copy the files in INST_SCRIPT to
     INSTALLSCRIPT.

LDFROM
     defaults to "$(OBJECT)" and is used in the ld command to specify
     what files to link/load from (also see dynamic_lib below for how to
     specify ld flags)

LIBPERL_A
     The filename of the perllibrary that will be used together with
     this extension. Defaults to libperl.a.

LIB
     LIB can only be set at `perl Makefile.PL' time. It has the effect
     of setting both INSTALLPRIVLIB and INSTALLSITELIB to that value
     regardless any

LIBS
     An anonymous array of alternative library specifications to be
     searched for (in order) until at least one library is found. E.g.

          'LIBS' => ["-lgdbm", "-ldbm -lfoo", "-L/path -ldbm.nfs"]

     Mind, that any element of the array contains a complete set of
     arguments for the ld command. So do not specify

          'LIBS' => ["-ltcl", "-ltk", "-lX11"]

     See ODBM_File/Makefile.PL for an example, where an array is
     needed. If you specify a scalar as in

          'LIBS' => "-ltcl -ltk -lX11"

     MakeMaker will turn it into an array with one element.

LINKTYPE
     'static' or 'dynamic' (default unless usedl=undef in
     config.sh). Should only be used to force static linking (also see
     linkext below).

MAKEAPERL
     Boolean which tells MakeMaker, that it should include the rules to
     make a perl. This is handled automatically as a switch by
     MakeMaker. The user normally does not need it.

MAKEFILE
     The name of the Makefile to be produced.

MAN1PODS
     Hashref of pod-containing files. MakeMaker will default this to all
     EXE_FILES files that include POD directives. The files listed here
     will be converted to man pages and installed as was requested at
     Configure time.

MAN3PODS
     Hashref of .pm and .pod files. MakeMaker will default this to all
      .pod and any .pm files that include POD directives. The files
     listed here will be converted to man pages and installed as was
     requested at Configure time.

MAP_TARGET
     If it is intended, that a new perl binary be produced, this
     variable may hold a name for that binary. Defaults to perl

MYEXTLIB
     If the extension links to a library that it builds set this to the
     name of the library (see SDBM_File)

NAME
     Perl module name for this extension (DBD::Oracle). This will
     default to the directory name but should be explicitly defined in
     the Makefile.PL.

NEEDS_LINKING
     MakeMaker will figure out, if an extension contains linkable code
     anywhere down the directory tree, and will set this variable
     accordingly, but you can speed it up a very little bit, if you
     define this boolean variable yourself.

NOECHO
     Defaults to `@'. By setting it to an empty string you can generate
     a Makefile that echos all commands. Mainly used in debugging
     MakeMaker itself.

NORECURS
     Boolean.  Attribute to inhibit descending into subdirectories.

OBJECT
     List of object files, defaults to '$(BASEEXT)$(OBJ_EXT)', but can
     be a long string containing all object files, e.g. "tkpBind.o
     tkpButton.o tkpCanvas.o"

OPTIMIZE
     Defaults to `-O'. Set it to -g to turn debugging on. The flag is
     passed to subdirectory makes.

PERL
     Perl binary for tasks that can be done by miniperl

PERLMAINCC
     The call to the program that is able to compile
     perlmain.c. Defaults to $(CC).

PERL_ARCHLIB
     Same as above for architecture dependent files

PERL_LIB
     Directory containing the Perl library to use.

PERL_SRC
     Directory containing the Perl source code (use of this should be
     avoided, it may be undefined)

PL_FILES
     Ref to hash of files to be processed as perl programs. MakeMaker
     will default to any found *.PL file (except Makefile.PL) being keys
     and the basename of the file being the value. E.g.

          {'foobar.PL' => 'foobar'}

     The *.PL files are expected to produce output to the target files
     themselves.

PM
     Hashref of .pm files and *.pl files to be installed.  e.g.

          {'name_of_file.pm' => '$(INST_LIBDIR)/install_as.pm'}

     By default this will include *.pm and *.pl. If a lib directory
     exists and is not listed in DIR (above) then any *.pm and *.pl
     files it contains will also be included by default.  Defining PM in
     the Makefile.PL will override PMLIBDIRS.

PMLIBDIRS
     Ref to array of subdirectories containing library files.  Defaults
     to [ 'lib', $(BASEEXT) ]. The directories will be scanned and any
     files they contain will be installed in the corresponding location
     in the library.  A libscan() method can be used to alter the
     behaviour.  Defining PM in the Makefile.PL will override PMLIBDIRS.

PREFIX
     Can be used to set the three INSTALL* attributes in one go (except
     for probably INSTALLMAN1DIR, if it is not below PREFIX according to
     %Config).  They will have PREFIX as a common directory node and
     will branch from that node into lib/, lib/ARCHNAME or whatever
     Configure decided at the build time of your perl (unless you
     override one of them, of course).

PREREQ_PM
     Hashref: Names of modules that need to be available to run this
     extension (e.g. Fcntl for SDBM_File) are the keys of the hash and
     the desired version is the value. If the required version number is
     0, we only check if any version is installed already.

SKIP
     Arryref. E.g. [qw(name1 name2)] skip (do not write) sections of the
     Makefile. Caution! Do not use the SKIP attribute for the
     neglectible speedup. It may seriously damage the resulting
     Makefile. Only use it, if you really need it.

TYPEMAPS
     Ref to array of typemap file names.  Use this when the typemaps are
     in some directory other than the current directory or when they are
     not named *typemap*.  The last typemap in the list takes
     precedence.  A typemap in the current directory has highest
     precedence, even if it isn't listed in TYPEMAPS.  The default
     system typemap has lowest precedence.

VERSION
     Your version number for distributing the package.  This defaults to
     0.1.

VERSION_FROM
     Instead of specifying the VERSION in the Makefile.PL you can let
     MakeMaker parse a file to determine the version number. The parsing
     routine requires that the file named by VERSION_FROM contains one
     single line to compute the version number. The first line in the
     file that contains the regular expression

          /([\$*])(([\w\:\']*)\bVERSION)\b.*\=/

     will be evaluated with eval() and the value of the named variable
     *after* the eval() will be assigned to the VERSION attribute of the
     MakeMaker object. The following lines will be parsed o.k.:

          $VERSION = '1.00';
          *VERSION = \'1.01';
          ( $VERSION ) = '$Revision: 1.216 $ ' =~ /\$Revision:\s+([^\s]+)/;
          $FOO::VERSION = '1.10';
          *FOO::VERSION = \'1.11';

     but these will fail:

          my $VERSION = '1.01';
          local $VERSION = '1.02';
          local $FOO::VERSION = '1.30';

     The file named in VERSION_FROM is not added as a dependency to
     Makefile. This is not really correct, but it would be a major pain
     during development to have to rewrite the Makefile for any smallish
     change in that file. If you want to make sure that the Makefile
     contains the correct VERSION macro after any change of the file,
     you would have to do something like

          depend => { Makefile => '$(VERSION_FROM)' }

     See attribute depend below.

XS
     Hashref of .xs files. MakeMaker will default this.  e.g.

          {'name_of_file.xs' => 'name_of_file.c'}

     The .c files will automatically be included in the list of files
     deleted by a make clean.

XSOPT
     String of options to pass to xsubpp.  This might include `-C++' or
     `-extern'.  Do not include typemaps here; the TYPEMAP parameter
     exists for that purpose.

XSPROTOARG
     May be set to an empty string, which is identical to `-prototypes',
     or `-noprototypes'. See the xsubpp documentation for
     details. MakeMaker defaults to the empty string.

XS_VERSION
     Your version number for the .xs file of this package.  This
     defaults to the value of the VERSION attribute.


Additional lowercase attributes
-------------------------------

can be used to pass parameters to the methods which implement that part
of the Makefile.

clean
          {FILES => "*.xyz foo"}

depend
          {ANY_TARGET => ANY_DEPENDECY, ...}

dist
          {TARFLAGS => 'cvfF', COMPRESS => 'gzip', SUFFIX => 'gz',
          SHAR => 'shar -m', DIST_CP => 'ln', ZIP => '/bin/zip',
          ZIPFLAGS => '-rl', DIST_DEFAULT => 'private tardist' }

     If you specify COMPRESS, then SUFFIX should also be altered, as it
     is needed to tell make the target file of the compression. Setting
     DIST_CP to ln can be useful, if you need to preserve the timestamps
     on your files. DIST_CP can take the values 'cp', which copies the
     file, 'ln', which links the file, and 'best' which copies symbolic
     links and links the rest. Default is 'best'.

dynamic_lib
          {ARMAYBE => 'ar', OTHERLDFLAGS => '...', INST_DYNAMIC_DEP => '...'}

installpm
     Deprecated as of MakeMaker 5.23. See `pm_to_blib', *Note
     ExtUtils/MM_Unix: ExtUtils/MM_Unix,.

linkext
          {LINKTYPE => 'static', 'dynamic' or ''}

     NB: Extensions that have nothing but *.pm files had to say

          {LINKTYPE => ''}

     with Pre-5.0 MakeMakers. Since version 5.00 of MakeMaker such a
     line can be deleted safely. MakeMaker recognizes, when there's
     nothing to be linked.

macro
          {ANY_MACRO => ANY_VALUE, ...}

realclean
          {FILES => '$(INST_ARCHAUTODIR)/*.xyz'}

tool_autosplit
          {MAXLEN =Greater_Than_Special_Sequence 8}


Overriding MakeMaker Methods
----------------------------

If you cannot achieve the desired Makefile behaviour by specifying
attributes you may define private subroutines in the Makefile.PL.  Each
subroutines returns the text it wishes to have written to the
Makefile. To override a section of the Makefile you can either say:

     sub MY::c_o { "new literal text" }

or you can edit the default by saying something like:

     sub MY::c_o {
         package MY;	# so that "SUPER" works right
         my $inherited = shift->SUPER::c_o(@_);
         $inherited =~ s/old text/new text/;
         $inherited;
     }

If you running experiments with embedding perl as a library into other
applications, you might find MakeMaker not sufficient. You'd better have
a look at ExtUtils::embed which is a collection of utilities for
embedding.

If you still need a different solution, try to develop another
subroutine, that fits your needs and submit the diffs to
`perl5-porters@nicoh.com' or `comp.lang.perl.misc' as appropriate.

For a complete description of all MakeMaker methods see *Note
ExtUtils/MM_Unix: ExtUtils/MM_Unix,.

Here is a simple example of how to add a new target to the generated
Makefile:

     sub MY::postamble {
     	'
     $(MYEXTLIB): sdbm/Makefile
     	    cd sdbm && $(MAKE) all
     ';
     }


Hintsfile support
-----------------

MakeMaker.pm uses the architecture specific information from
Config.pm. In addition it evaluates architecture specific hints files in
a `hints/' directory. The hints files are expected to be named like
their counterparts in `PERL_SRC/hints', but with an `.pl' file name
extension (eg. `next_3_2.pl'). They are simply evaled by MakeMaker
within the WriteMakefile() subroutine, and can be used to execute
commands as well as to include special variables. The rules which
hintsfile is chosen are the same as in Configure.

The hintsfile is eval()ed immediately after the arguments given to
WriteMakefile are stuffed into a hash reference $self but before this
reference becomes blessed. So if you want to do the equivalent to
override or create an attribute you would say something like

     $self->{LIBS} = ['-ldbm -lucb -lc'];


Distribution Support
--------------------

For authors of extensions MakeMaker provides several Makefile
targets. Most of the support comes from the ExtUtils::Manifest module,
where additional documentation can be found.

make distcheck
     reports which files are below the build directory but not in the
     MANIFEST file and vice versa. (See ExtUtils::Manifest::fullcheck()
     for details)

make skipcheck
     reports which files are skipped due to the entries in the
     MANIFEST.SKIP file (See ExtUtils::Manifest::skipcheck() for
     details)

make distclean
     does a realclean first and then the distcheck. Note that this is
     not needed to build a new distribution as long as you are sure,
     that the MANIFEST file is ok.

make manifest
     rewrites the MANIFEST file, adding all remaining files found (See
     ExtUtils::Manifest::mkmanifest() for details)

make distdir
     Copies all the files that are in the MANIFEST file to a newly
     created directory with the name `$(DISTNAME)-$(VERSION)'. If that
     directory exists, it will be removed first.

make disttest
     Makes a distdir first, and runs a `perl Makefile.PL', a make, and a
     make test in that directory.

make tardist
     First does a distdir. Then a command $(PREOP) which defaults to a
     null command, followed by $(TOUNIX), which defaults to a null
     command under UNIX, and will convert files in distribution
     directory to UNIX format otherwise. Next it runs `tar' on that
     directory into a tarfile and deletes the directory. Finishes with a
     command $(POSTOP) which defaults to a null command.

make dist
     Defaults to $(DIST_DEFAULT) which in turn defaults to tardist.

make uutardist
     Runs a tardist first and uuencodes the tarfile.

make shdist
     First does a distdir. Then a command $(PREOP) which defaults to a
     null command. Next it runs `shar' on that directory into a sharfile
     and deletes the intermediate directory again. Finishes with a
     command $(POSTOP) which defaults to a null command.  Note: For
     shdist to work properly a `shar' program that can handle
     directories is mandatory.

make zipdist
     First does a distdir. Then a command $(PREOP) which defaults to a
     null command. Runs `$(ZIP) $(ZIPFLAGS)' on that directory into a
     zipfile. Then deletes that directory. Finishes with a command
     $(POSTOP) which defaults to a null command.

make ci
     Does a $(CI) and a $(RCS_LABEL) on all files in the MANIFEST file.

Customization of the dist targets can be done by specifying a hash
reference to the dist attribute of the WriteMakefile call. The following
parameters are recognized:

     CI           ('ci -u')
     COMPRESS     ('compress')
     POSTOP       ('@ :')
     PREOP        ('@ :')
     TO_UNIX      (depends on the system)
     RCS_LABEL    ('rcs -q -Nv$(VERSION_SYM):')
     SHAR         ('shar')
     SUFFIX       ('Z')
     TAR          ('tar')
     TARFLAGS     ('cvf')
     ZIP          ('zip')
     ZIPFLAGS     ('-r')

An example:

     WriteMakefile( 'dist' => { COMPRESS=>"gzip", SUFFIX=>"gz" })


SEE ALSO
========

ExtUtils::MM_Unix, ExtUtils::Manifest, ExtUtils::testlib,
ExtUtils::Install, ExtUtils::embed


AUTHORS
=======

Andy Dougherty <`doughera@lafcol.lafayette.edu'>, Andreas KE<ouml>nig
<`A.Koenig@franz.ww.TU-Berlin.DE'>, Tim Bunce <`Tim.Bunce@ig.co.uk'>.
VMS support by Charles Bailey <`bailey@genetics.upenn.edu'>.  OS/2
support by Ilya Zakharevich <`ilya@math.ohio-state.edu'>.  Contact the
makemaker mailing list `mailto:makemaker@franz.ww.tu-berlin.de', if you
have any questions.




