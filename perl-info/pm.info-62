Info file: pm.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `bigpm.texi'
using `texinfmt.el' version 2.32 of 19 November 1993.





File: pm.info, Node: ptkFAQ, Next: sigtrap, Prev: overload, Up: Module List

ptkFAQ
******



NAME
====

ptkFAQ


AUTHOR
======

Peter Prymmer pvhp@lns62.lns.cornell.edu




File: pm.info, Node: sigtrap, Next: strict, Prev: ptkFAQ, Up: Module List

Perl pragma to enable simple signal handling
********************************************



NAME
====

sigtrap - Perl pragma to enable simple signal handling


SYNOPSIS
========

     use sigtrap;
     use sigtrap qw(stack-trace old-interface-signals);	# equivalent
     use sigtrap qw(BUS SEGV PIPE ABRT);
     use sigtrap qw(die INT QUIT);
     use sigtrap qw(die normal-signals);
     use sigtrap qw(die untrapped normal-signals);
     use sigtrap qw(die untrapped normal-signals
     		    stack-trace any error-signals);
     use sigtrap 'handler' => \&my_handler, 'normal-signals';
     use sigtrap qw(handler my_handler normal-signals
     	    	    stack-trace error-signals);


DESCRIPTION
===========

The sigtrap pragma is a simple interface to installing signal handlers.
You can have it install one of two handlers supplied by sigtrap itself
(one which provides a Perl stack trace and one which simply `die()'s),
or alternately you can supply your own handler for it to install.  It
can be told only to install a handler for signals which are either
untrapped or ignored.  It has a couple of lists of signals to trap, plus
you can supply your own list of signals.

The arguments passed to the use statement which invokes sigtrap are
processed in order.  When a signal name or the name of one of sigtrap's
signal lists is encountered a handler is immediately installed, when an
option is encountered it affects subsequently installed handlers.


OPTIONS
=======


SIGNAL HANDLERS
---------------

These options affect which handler will be used for subsequently
installed signals.

*stack-trace*
     The handler used for subsequently installed signals outputs a Perl
     stack trace to STDERR and then tries to dump core.  This is the
     default signal handler.

die
     The handler used for subsequently installed signals calls die
     (actually croak) with a message indicating which signal was caught.

handler *your-handler*
     *your-handler* will be used as the handler for subsequently installed
     signals.  *your-handler* can be any value which is valid as an
     assignment to an element of `%SIG'.


SIGNAL LISTS
------------

sigtrap has a few built-in lists of signals to trap.  They are:

*normal-signals*
     These are the signals which a program might normally expect to
     encounter and which by default cause it to terminate.  They are
     HUP, INT, PIPE and TERM.

*error-signals*
     These signals usually indicate a serious problem with the Perl
     interpreter or with your script.  They are ABRT, BUS, EMT, FPE,
     ILL, QUIT, SEGV, SYS and TRAP.

*old-interface-signals*
     These are the signals which were trapped by default by the old
     sigtrap interface, they are ABRT, BUS, EMT, FPE, ILL, PIPE, QUIT,
     SEGV, SYS, TERM, and TRAP.  If no signals or signals lists are
     passed to sigtrap, this list is used.

For each of these three lists, the collection of signals set to be
trapped is checked before trapping; if your architecture does not
implement a particular signal, it will not be trapped but rather
silently ignored.


OTHER
-----

untrapped
     This token tells sigtrap to install handlers only for subsequently
     listed signals which aren't already trapped or ignored.

any
     This token tells sigtrap to install handlers for all subsequently
     listed signals.  This is the default behavior.

signal
     Any argument which looks like a signal name (that is,
     `/^[A-Z][A-Z0-9]*$/') indicates that sigtrap should install a
     handler for that name.

number
     Require that at least version number of sigtrap is being used.


EXAMPLES
========

Provide a stack trace for the old-interface-signals:

     use sigtrap;

Ditto:

     use sigtrap qw(stack-trace old-interface-signals);

Provide a stack trace on the 4 listed signals only:

     use sigtrap qw(BUS SEGV PIPE ABRT);

Die on INT or QUIT:

     use sigtrap qw(die INT QUIT);

Die on HUP, INT, PIPE or TERM:

     use sigtrap qw(die normal-signals);

Die on HUP, INT, PIPE or TERM, except don't change the behavior for
signals which are already trapped or ignored:

     use sigtrap qw(die untrapped normal-signals);

Die on receipt one of an of the *normal-signals* which is currently
untrapped, provide a stack trace on receipt of any of the
*error-signals*:

     use sigtrap qw(die untrapped normal-signals
     		    stack-trace any error-signals);

Install my_handler() as the handler for the *normal-signals*:

     use sigtrap 'handler', \&my_handler, 'normal-signals';

Install my_handler() as the handler for the normal-signals, provide a
Perl stack trace on receipt of one of the error-signals:

     use sigtrap qw(handler my_handler normal-signals
     	    	    stack-trace error-signals);




File: pm.info, Node: strict, Next: subs, Prev: sigtrap, Up: Module List

Perl pragma to restrict unsafe constructs
*****************************************



NAME
====

strict - Perl pragma to restrict unsafe constructs


SYNOPSIS
========

     use strict;

     use strict "vars";
     use strict "refs";
     use strict "subs";

     use strict;
     no strict "vars";


DESCRIPTION
===========

If no import list is supplied, all possible restrictions are assumed.
(This is the safest mode to operate in, but is sometimes too strict for
casual programming.)  Currently, there are three possible things to be
strict about: "subs", "vars", and "refs".

`strict refs'
     This generates a runtime error if you use symbolic references (see
     *Note Perlref: (perl.info)perlref,).

          use strict 'refs';
          $ref = \$foo;
          print $$ref;	# ok
          $ref = "foo";
          print $$ref;	# runtime error; normally ok

`strict vars'
     This generates a compile-time error if you access a variable that
     wasn't localized via my() or wasn't fully qualified.  Because this
     is to avoid variable suicide problems and subtle dynamic scoping
     issues, a merely local() variable isn't good enough.  See `my',
     *Note Perlfunc: (perl.info)perlfunc, and `local', *Note Perlfunc:
     (perl.info)perlfunc,.

          use strict 'vars';
          $X::foo = 1;	 # ok, fully qualified
          my $foo = 10;	 # ok, my() var
          local $foo = 9;	 # blows up

     The local() generated a compile-time error because you just touched
     a global name without fully qualifying it.

`strict subs'
     This disables the poetry optimization, generating a compile-time
     error if you try to use a bareword identifier that's not a
     subroutine, unless it appears in curly braces or on the left hand
     side of the "=>" symbol.

          use strict 'subs';
          $SIG{PIPE} = Plumber;   	# blows up
          $SIG{PIPE} = "Plumber"; 	# just fine: bareword in curlies always ok
          $SIG{PIPE} = \&Plumber; 	# preferred form

See `Pragmatic Modules', *Note Perlmod: (perl.info)perlmod,.




File: pm.info, Node: subs, Next: vars, Prev: strict, Up: Module List

Perl pragma to predeclare sub names
***********************************



NAME
====

subs - Perl pragma to predeclare sub names


SYNOPSIS
========

     use subs qw(frob);
     frob 3..10;


DESCRIPTION
===========

This will predeclare all the subroutine whose names are in the list,
allowing you to use them without parentheses even before they're
declared.

Unlike pragmas that affect the $^H hints variable, the `use vars' and
`use subs' declarations are not BLOCK-scoped.  They are thus effective
for the entire file in which they appear.  You may not rescind such
declarations with `no vars' or `no subs'.

See `Pragmatic Modules', *Note Perlmod: (perl.info)perlmod, and `strict
subs', *Note Strict: strict,.




File: pm.info, Node: vars, Prev: subs, Up: Module List

Perl pragma to predeclare global variable names
***********************************************



NAME
====

vars - Perl pragma to predeclare global variable names


SYNOPSIS
========

     use vars qw($frob @mung %seen);


DESCRIPTION
===========

This will predeclare all the variables whose names are in the list,
allowing you to use them under "use strict", and disabling any typo
warnings.

Unlike pragmas that affect the $^H hints variable, the `use vars' and
`use subs' declarations are not BLOCK-scoped.  They are thus effective
for the entire file in which they appear.  You may not rescind such
declarations with `no vars' or `no subs'.

Packages such as the AutoLoader and SelfLoader that delay loading of
subroutines within packages can create problems with package lexicals
defined using my(). While the vars pragma cannot duplicate the effect of
package lexicals (total transparency outside of the package), it can act
as an acceptable substitute by pre-declaring global symbols, ensuring
their availability to the later-loaded routines.

See `Pragmatic Modules', *Note Perlmod: (perl.info)perlmod,.




